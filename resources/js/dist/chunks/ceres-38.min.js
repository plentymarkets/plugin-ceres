"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[38],{32317:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ LoginView; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/login/LoginView.vue?vue&type=template&id=cb7f35d0&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "container-max mt-5"\n  }, [_c("div", {\n    staticClass: "row mb-5"\n  }, [_c("div", {\n    staticClass: "col-sm-10 offset-sm-1 col-md-6 offset-md-3"\n  }, [_c("div", [_c("h1", {\n    staticClass: "login-view-title mb-5"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.login")))]), _vm._v(" "), _c("login", {\n    attrs: {\n      backlink: _vm.sanitizedBacklink,\n      "has-to-forward": true\n    },\n    scopedSlots: _vm._u([{\n      key: "extend-overlay-buttons",\n      fn: function fn() {\n        return [_vm._t("extend-overlay-buttons")];\n      },\n      proxy: true\n    }], null, true)\n  })], 1), _vm._v(" "), _c("hr"), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-sm-{% if \'my-account\' not in backlink %}6{% else %}12{% endif %}",\n    class: {\n      "col-sm-6": !_vm.myAccountInBacklink,\n      "col-sm-12": _vm.myAccountInBacklink\n    }\n  }, [_c("a", {\n    staticClass: "btn btn-primary btn-block mb-3",\n    attrs: {\n      href: _vm.registrationUrl\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-user-plus",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  }), _vm._v("\\n                        " + _vm._s(_vm.$translate("Ceres::Template.loginRegister")) + "\\n                    ")])]), _vm._v(" "), !_vm.myAccountInBacklink ? _c("div", {\n    staticClass: "col-sm-6"\n  }, [_c("button", {\n    staticClass: "btn btn-primary btn-block mb-3",\n    on: {\n      click: function click($event) {\n        return _vm.openGuestModal();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-shopping-bag",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  }), _vm._v("\\n                        " + _vm._s(_vm.$translate("Ceres::Template.loginOrderAsGuest")) + "\\n                    ")])]) : _vm._e()]), _vm._v(" "), _vm._t("additional-content-after-buttons")], 2)]), _vm._v(" "), _c("div", {\n    ref: "guestModal",\n    staticClass: "modal fade",\n    attrs: {\n      tabindex: "-1",\n      role: "dialog"\n    }\n  }, [_c("div", {\n    staticClass: "modal-dialog"\n  }, [_c("div", {\n    staticClass: "modal-content"\n  }, [_c("div", {\n    staticClass: "modal-header"\n  }, [_c("div", {\n    staticClass: "modal-title h3"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.loginOrderAsGuest")))]), _vm._v(" "), _c("button", {\n    staticClass: "close",\n    attrs: {\n      type: "button",\n      "data-testing": "guest-login-modal",\n      "data-dismiss": "modal",\n      "aria-hidden": "true",\n      "aria-label": _vm.$translate("Ceres::Template.closeIcon")\n    }\n  }, [_vm._v("Ã—")])]), _vm._v(" "), _c("div", {\n    staticClass: "modal-body"\n  }, [_c("guest-login", {\n    attrs: {\n      backlink: _vm.sanitizedBacklink,\n      "initial-email": _vm.guestEmail\n    }\n  })], 1)])])])]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/login/LoginView.vue?vue&type=template&id=cb7f35d0&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(26699);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js\nvar es_string_includes = __webpack_require__(32023);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ModalService.js\nvar ModalService = __webpack_require__(73740);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/login/LoginView.vue?vue&type=script&lang=js&\n\n\n\n/* harmony default export */ var LoginViewvue_type_script_lang_js_ = ({\n  props: {\n    backlink: {\n      type: String,\n      default: ""\n    },\n    guestEmail: {\n      type: String\n    }\n  },\n  computed: {\n    registrationUrl: function registrationUrl() {\n      if (this.backlink !== "") {\n        return App.urls.registration + "?backlink=" + this.sanitizedBacklink;\n      }\n      return App.urls.registration;\n    },\n    sanitizedBacklink: function sanitizedBacklink() {\n      return encodeURI(this.backlink);\n    },\n    myAccountInBacklink: function myAccountInBacklink() {\n      return this.backlink.includes(App.urls.myAccount);\n    }\n  },\n  methods: {\n    openGuestModal: function openGuestModal() {\n      ModalService["default"].findModal(this.$refs.guestModal).show();\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/login/LoginView.vue?vue&type=script&lang=js&\n /* harmony default export */ var login_LoginViewvue_type_script_lang_js_ = (LoginViewvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(51900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/login/LoginView.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  login_LoginViewvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var LoginView = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32317\n')}}]);