{"version":3,"sources":["webpack:///./resources/js/src/app/components/item/QuantityInput.vue","webpack:///resources/js/src/app/components/item/QuantityInput.vue","webpack:///./resources/js/src/app/components/item/QuantityInput.vue?18a6","webpack:///./resources/js/src/app/components/item/QuantityInput.vue?8dc2"],"names":["render","_vm","this","_c","_self","staticClass","ref","attrs","type","disabled","waiting","$translate","domProps","value","displayValue","on","change","$event","setValue","target","_v","directives","name","rawName","isMaximum","compMax","expression","class","useAppearance","title","maximumHint","click","increaseValue","isMinimum","minimumHint","decreaseValue","_withStripped","props","Number","required","timeout","default","min","max","interval","Boolean","variationId","data","compValue","compMin","compInterval","compDecimals","onValueChanged","created","_this","defaultValue","minDecimals","floatLength","intervalDecimals","Math","debounce","$emit","isNullOrUndefined","fetchQuantityFromBasket","computed","_objectSpread","variationBasketQuantity","_this2","itemSetVariationId","basketObject","$store","state","basket","items","find","variations","quantity","isDefined","$options","filters","numberFormat","itemSetId","getters","concat","variation","id","mapState","basketItems","watch","newValue","handler","oldValue","deep","newInterval","methods","formatFloat","diff","replace","App","decimalSeparator","parseFloat","isNaN","limit","$refs","quantityInputField","component"],"mappings":"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","file":"chunks/ceres-37.min.js","sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", { staticClass: \"qty-box d-flex h-100\" }, [\n    _c(\"input\", {\n      ref: \"quantityInputField\",\n      staticClass: \"qty-input text-center\",\n      attrs: {\n        type: \"text\",\n        disabled: _vm.waiting,\n        \"aria-label\": _vm.$translate(\"Ceres::Template.itemQuantityInput\"),\n      },\n      domProps: { value: _vm.displayValue },\n      on: {\n        change: function ($event) {\n          return _vm.setValue($event.target.value)\n        },\n      },\n    }),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"qty-btn-container d-flex flex-column\" }, [\n      _c(\n        \"button\",\n        {\n          directives: [\n            {\n              name: \"tooltip\",\n              rawName: \"v-tooltip\",\n              value: _vm.isMaximum && _vm.compMax !== 0,\n              expression: \"isMaximum && compMax !== 0\",\n            },\n          ],\n          staticClass:\n            \"btn qty-btn flex-fill d-flex justify-content-center p-0\",\n          class: {\n            disabled: _vm.isMaximum || _vm.waiting,\n            \"btn-appearance\": _vm.useAppearance,\n          },\n          attrs: {\n            \"data-toggle\": \"tooltip\",\n            \"data-placement\": \"top\",\n            \"data-testing\": \"quantity-btn-increase\",\n            title: _vm.maximumHint,\n            \"aria-label\": _vm.$translate(\n              \"Ceres::Template.itemQuantityInputIncrease\"\n            ),\n          },\n          on: {\n            click: function ($event) {\n              return _vm.increaseValue()\n            },\n          },\n        },\n        [\n          _c(\"i\", {\n            staticClass: \"fa fa-plus default-float\",\n            attrs: { \"aria-hidden\": \"true\" },\n          }),\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"button\",\n        {\n          directives: [\n            {\n              name: \"tooltip\",\n              rawName: \"v-tooltip\",\n              value: _vm.isMinimum && _vm.compMax !== 0,\n              expression: \"isMinimum && compMax !== 0\",\n            },\n          ],\n          staticClass:\n            \"btn qty-btn flex-fill d-flex justify-content-center p-0\",\n          class: {\n            disabled: _vm.isMinimum || _vm.waiting,\n            \"btn-appearance\": _vm.useAppearance,\n          },\n          attrs: {\n            \"data-toggle\": \"tooltip\",\n            \"data-placement\": \"bottom\",\n            \"data-testing\": \"quantity-btn-decrease\",\n            title: _vm.minimumHint,\n            \"aria-label\": _vm.$translate(\n              \"Ceres::Template.itemQuantityInputDecrease\"\n            ),\n          },\n          on: {\n            click: function ($event) {\n              return _vm.decreaseValue()\n            },\n          },\n        },\n        [\n          _c(\"i\", {\n            staticClass: \"fa fa-minus default-float\",\n            attrs: { \"aria-hidden\": \"true\" },\n          }),\n        ]\n      ),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"qty-box d-flex h-100\">\n        <input class=\"qty-input text-center\"\n               type=\"text\"\n               :value=\"displayValue\"\n               @change=\"setValue($event.target.value)\"\n               :disabled=\"waiting\"\n               ref=\"quantityInputField\"\n               :aria-label=\"$translate('Ceres::Template.itemQuantityInput')\">\n\n        <div class=\"qty-btn-container d-flex flex-column\">\n            <button class=\"btn qty-btn flex-fill d-flex justify-content-center p-0\"\n                 @click=\"increaseValue()\"\n                 :class=\"{ 'disabled': isMaximum || waiting, 'btn-appearance': useAppearance }\"\n                 v-tooltip=\"isMaximum && compMax !== 0\"\n                 data-toggle=\"tooltip\"\n                 data-placement=\"top\"\n                 data-testing=\"quantity-btn-increase\"\n                 :title=\"maximumHint\"\n                 :aria-label=\"$translate('Ceres::Template.itemQuantityInputIncrease')\">\n                <i class=\"fa fa-plus default-float\" aria-hidden=\"true\"></i>\n            </button>\n\n            <button class=\"btn qty-btn flex-fill d-flex justify-content-center p-0\"\n                 @click=\"decreaseValue()\"\n                 :class=\"{ 'disabled': isMinimum || waiting, 'btn-appearance': useAppearance }\"\n                 v-tooltip=\"isMinimum && compMax !== 0\"\n                 data-toggle=\"tooltip\"\n                 data-placement=\"bottom\"\n                 data-testing=\"quantity-btn-decrease\"\n                 :title=\"minimumHint\"\n                 :aria-label=\"$translate('Ceres::Template.itemQuantityInputDecrease')\">\n                <i class=\"fa fa-minus default-float\" aria-hidden=\"true\"></i>\n            </button>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { floatLength, formatFloat, limit } from \"../../helper/number\";\nimport { defaultValue, isDefined, isNullOrUndefined } from \"../../helper/utils\";\nimport { debounce } from \"../../helper/debounce\";\nimport { mapState } from \"vuex\";\n\nexport default {\n    name: \"quantity-input\",\n\n    props: {\n        value: {\n            type: Number,\n            required: true\n        },\n        timeout: {\n            type: Number,\n            required: false,\n            default: 500\n        },\n        min: {\n            type: Number,\n            required: false,\n            default: 0\n        },\n        max: {\n            type: Number,\n            required: false\n        },\n        interval: {\n            type: Number,\n            required: false,\n            default: 1\n        },\n        waiting: {\n            type: Boolean,\n            required: false\n        },\n        variationId: {\n            type: Number,\n            required: false\n        },\n        useAppearance: Boolean\n    },\n\n    data()\n    {\n        return {\n            compValue:      this.value,\n            compMin:        this.min,\n            compMax:        this.max,\n            compInterval:   this.interval,\n            compDecimals:   0,\n            onValueChanged: null\n        };\n    },\n\n    created()\n    {\n        this.compInterval = defaultValue(this.compInterval, 1);\n        this.compInterval = this.compInterval === 0 ? 1 : this.compInterval;\n\n        const minDecimals = floatLength(this.min);\n        const intervalDecimals = floatLength(this.compInterval);\n\n        this.compDecimals = Math.max(minDecimals, intervalDecimals);\n\n        this.onValueChanged = debounce(() =>\n        {\n            this.$emit(\"quantity-change\", this.compValue);\n        }, defaultValue(this.timeout, 500));\n\n        if (!isNullOrUndefined(this.variationId))\n        {\n            this.fetchQuantityFromBasket();\n        }\n    },\n\n    computed:\n    {\n        variationBasketQuantity()\n        {\n            if (isNullOrUndefined(this.variationId))\n            {\n                return 0;\n            }\n\n            if(this.itemSetVariationId <= 0 || this.variationId === this.itemSetVariationId)\n            {\n                const basketObject = this.$store.state.basket.items.find(variations => variations.variationId === this.variationId);\n\n                return basketObject ? basketObject.quantity : 0;\n            }\n\n            return 0;\n        },\n\n        isMinimum()\n        {\n            return isDefined(this.compMin) && (this.compValue - this.compInterval) < this.compMin;\n        },\n\n        isMaximum()\n        {\n            return isDefined(this.compMax) && (this.compValue + this.compInterval) > this.compMax;\n        },\n\n        minimumHint()\n        {\n            return this.$translate(\n                \"Ceres::Template.singleItemQuantityMin\",\n                {\n                    min: this.$options.filters.numberFormat(this.compMin)\n                }\n            );\n        },\n\n        maximumHint()\n        {\n            return this.$translate(\n                \"Ceres::Template.singleItemQuantityMax\",\n                {\n                    max: this.$options.filters.numberFormat(this.max)\n                }\n            );\n        },\n\n        displayValue()\n        {\n            return this.$options.filters.numberFormat(this.compValue);\n        },\n\n        itemSetVariationId()\n        {\n            if (this.$store.state.items.itemSetId > 0)\n            {\n                return this.$store.getters[`${this.$store.state.items.itemSetId}/currentItemVariation`].variation.id;\n            }\n\n            return 0;\n        },\n\n        ...mapState({\n            basketItems: state => state.basket.items\n        })\n    },\n\n    watch:\n    {\n        variationId(newValue)\n        {\n            if (isDefined(newValue))\n            {\n                this.fetchQuantityFromBasket();\n            }\n        },\n\n        basketItems:\n        {\n            handler(newValue, oldValue)\n            {\n                if (isDefined(this.variationId))\n                {\n                    this.fetchQuantityFromBasket();\n                }\n            },\n            deep: true\n        },\n\n        min(newValue)\n        {\n            this.compMin = newValue;\n            this.fetchQuantityFromBasket();\n        },\n\n        max(newValue)\n        {\n            this.compMax = newValue;\n            this.fetchQuantityFromBasket();\n        },\n\n        value(newValue, oldValue)\n        {\n            if (newValue !== oldValue)\n            {\n                this.setValue(newValue);\n            }\n        },\n\n        interval(newInterval)\n        {\n            this.compInterval = defaultValue(newInterval, 1)\n        }\n    },\n\n    methods:\n    {\n        increaseValue()\n        {\n            const newValue = formatFloat(this.compValue + this.compInterval, this.compDecimals);\n\n            if ((isNullOrUndefined(this.compMax) || newValue <= this.compMax) && !this.waiting)\n            {\n                this.setValue(newValue);\n            }\n        },\n\n        decreaseValue()\n        {\n            const newValue = formatFloat(this.compValue - this.compInterval, this.compDecimals);\n\n            if ((isNullOrUndefined(this.compMin) || newValue >= this.compMin) && !this.waiting)\n            {\n                this.setValue(newValue);\n            }\n        },\n\n        setValue(value)\n        {\n            // consider the configured decimal seperator (if the input is typed in the input field)\n            if (typeof value === \"string\")\n            {\n                value = value.replace(App.decimalSeparator || \",\", \".\");\n            }\n\n            value = parseFloat(value);\n            if (isNaN(value))\n            {\n                value = defaultValue(this.compMin, 1);\n            }\n\n            // limit new value to min/ max value\n            value = limit(value, this.compMin, this.compMax);\n\n            // make sure, new value is an even multiple of interval\n            let diff;\n            if (this.variationBasketQuantity === 0 && this.min !== 0)\n            {\n                diff = formatFloat((value - this.min) % this.compInterval, this.compDecimals, true);\n            }\n            else\n            {\n                diff = formatFloat(value % this.compInterval, this.compDecimals, true);\n            }\n\n            if (diff > 0 && diff !== this.compInterval)\n            {\n                if (diff < this.compInterval / 2)\n                {\n                    value -= diff;\n                }\n                else\n                {\n                    value += this.compInterval - diff;\n                }\n                value = limit(value, this.compMin, this.compMax);\n            }\n\n            // cut fraction\n            value = formatFloat(value, this.compDecimals);\n\n            if (value !== this.compValue)\n            {\n                this.compValue = value;\n                this.onValueChanged();\n            }\n            else if (!isNullOrUndefined(this.$refs.quantityInputField))\n            {\n                this.$refs.quantityInputField.value = this.displayValue;\n            }\n        },\n\n        fetchQuantityFromBasket()\n        {\n            if (!isNullOrUndefined(this.min) && this.variationBasketQuantity >= this.min && this.variationBasketQuantity !== 0)\n            {\n                // set the minimum value to the interval, if the item is already in the basket\n                this.compMin = this.compInterval;\n            }\n            else if (this.variationBasketQuantity === 0)\n            {\n                // reset the minimum, when item is not in the basket\n                this.compMin = this.min;\n            }\n\n            if (!isNullOrUndefined(this.max))\n            {\n                // decrease maximum quantity by quantity of variations already in basket\n                this.compMax = this.max - this.variationBasketQuantity;\n\n                if (this.variationBasketQuantity + this.compInterval > this.max)\n                {\n                    this.compMin = 0;\n                    this.compMax = 0;\n                    this.$emit(\"out-of-stock\", true);\n                }\n                else\n                {\n                    this.$emit(\"out-of-stock\", false);\n                }\n            }\n            else\n            {\n                this.$emit(\"out-of-stock\", false);\n            }\n\n            this.setValue(this.compMin);\n        }\n    }\n}\n</script>\n","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QuantityInput.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QuantityInput.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./QuantityInput.vue?vue&type=template&id=24dfbc62\"\nimport script from \"./QuantityInput.vue?vue&type=script&lang=js\"\nexport * from \"./QuantityInput.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}