(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[34],{44699:function(module,__unused_webpack_exports,__webpack_require__){eval("var DESCRIPTORS = __webpack_require__(19781);\nvar uncurryThis = __webpack_require__(1702);\nvar objectKeys = __webpack_require__(81956);\nvar toIndexedObject = __webpack_require__(45656);\nvar $propertyIsEnumerable = (__webpack_require__(55296).f);\n\nvar propertyIsEnumerable = uncurryThis($propertyIsEnumerable);\nvar push = uncurryThis([].push);\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {\n        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ2OTkuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsS0FBMEI7QUFDcEQsa0JBQWtCLG1CQUFPLENBQUMsSUFBb0M7QUFDOUQsaUJBQWlCLG1CQUFPLENBQUMsS0FBMEI7QUFDbkQsc0JBQXNCLG1CQUFPLENBQUMsS0FBZ0M7QUFDOUQsNEJBQTRCLDhCQUF1RDs7QUFFbkY7QUFDQTs7QUFFQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DZXJlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXkuanM/NmY1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoJHByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUoTywga2V5KSkge1xuICAgICAgICBwdXNoKHJlc3VsdCwgVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44699\n")},69720:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("var $ = __webpack_require__(82109);\nvar $entries = (__webpack_require__(44699).entries);\n\n// `Object.entries` method\n// https://tc39.es/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk3MjAuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxtQkFBTyxDQUFDLEtBQXFCO0FBQ3JDLGVBQWUsb0NBQStDOztBQUU5RDtBQUNBO0FBQ0EsSUFBSSw4QkFBOEI7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NlcmVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcz80ZmFkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLmVudHJpZXM7XG5cbi8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuICAgIHJldHVybiAkZW50cmllcyhPKTtcbiAgfVxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///69720\n")},26833:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("var $ = __webpack_require__(82109);\nvar $values = (__webpack_require__(44699).values);\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4MzMuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxtQkFBTyxDQUFDLEtBQXFCO0FBQ3JDLGNBQWMsbUNBQThDOztBQUU1RDtBQUNBO0FBQ0EsSUFBSSw4QkFBOEI7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NlcmVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzPzA3YWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXknKS52YWx1ZXM7XG5cbi8vIGBPYmplY3QudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoTyk7XG4gIH1cbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26833\n")},75356:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ VariationSelect; }\n});\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js\nvar es_function_name = __webpack_require__(68309);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(66992);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(41539);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(33948);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-int.js\nvar es_parse_int = __webpack_require__(91058);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/VariationSelect.vue?vue&type=template&id=588c1887&\n\n\n\n\n\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "row"\n  }, [_vm.attributes.length || _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible ? [_vm._l(_vm.attributes, function (attribute, index) {\n    return _c("div", {\n      key: index,\n      staticClass: "col-12 variation-select"\n    }, [attribute.type === "dropdown" ? _c("div", {\n      ref: "attributesContaner",\n      refInFor: true,\n      staticClass: "input-unit"\n    }, [_c("select", {\n      staticClass: "custom-select",\n      attrs: {\n        id: "custom-select_" + attribute.name,\n        "data-testing": "variation-select-dropdown"\n      },\n      on: {\n        change: function change($event) {\n          return _vm.selectAttribute(attribute.attributeId, $event.target.value);\n        }\n      }\n    }, [_vm.addPleaseSelectOption || !_vm.hasSelection ? _c("option", {\n      domProps: {\n        value: -1\n      }\n    }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemPleaseSelect")))]) : _vm._e(), _vm._v(" "), _vm.hasEmptyOption || _vm.selectedAttributes[attribute.attributeId] === null ? _c("option", {\n      domProps: {\n        value: null,\n        selected: _vm.selectedAttributes[attribute.attributeId] === null\n      }\n    }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemNoSelection")))]) : _vm._e(), _vm._v(" "), _vm._l(attribute.values, function (value) {\n      return _c("option", {\n        key: value.attributeValueId,\n        domProps: {\n          value: value.attributeValueId,\n          selected: value.attributeValueId === _vm.selectedAttributes[attribute.attributeId]\n        }\n      }, [_vm.isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) ? [_vm._v("\\n                            " + _vm._s(value.name) + "\\n                        ")] : _vm.isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, false) ? [_vm._v("\\n                            " + _vm._s(_vm.$translate("Ceres::Template.singleItemNotSalableAttribute", {\n        name: value.name\n      })) + "\\n                        ")] : [_vm._v("\\n                            " + _vm._s(_vm.$translate("Ceres::Template.singleItemInvalidAttribute", {\n        name: value.name\n      })) + "\\n                        ")]], 2);\n    })], 2), _vm._v(" "), _c("label", {\n      directives: [{\n        name: "tooltip",\n        rawName: "v-tooltip",\n        value: _vm.isTextCut(attribute.name),\n        expression: "isTextCut(attribute.name)"\n      }],\n      attrs: {\n        for: "custom-select_" + attribute.name,\n        "data-toggle": "tooltip",\n        "data-placement": "top",\n        title: attribute.name,\n        "data-testing": "variation-select-dropdown-label"\n      }\n    }, [_vm._v(_vm._s(attribute.name))])]) : attribute.type === "box" || attribute.type === "image" ? _c("div", [_c("span", {\n      staticClass: "text-muted",\n      attrs: {\n        "data-testing": "attribute-name"\n      }\n    }, [_vm._v(_vm._s(attribute.name) + ":")]), _vm._v(" "), _c("b", {\n      attrs: {\n        "data-testing": "attribute-value"\n      }\n    }, [_vm._v(_vm._s(_vm.getSelectedAttributeValueName(attribute)))]), _vm._v(" "), _c("div", {\n      staticClass: "v-s-boxes py-3",\n      class: {\n        images: attribute.type === "image"\n      }\n    }, [_vm.addPleaseSelectOption ? _c("div", {\n      staticClass: "v-s-box bg-white empty-option",\n      class: {\n        active: _vm.selectedAttributes[attribute.attributeId] === -1,\n        invalid: !_vm.isAttributeSelectionValid(attribute.attributeId, -1)\n      },\n      attrs: {\n        "data-testing": "variation-select-box"\n      },\n      on: {\n        click: function click($event) {\n          return _vm.selectAttribute(attribute.attributeId, -1);\n        }\n      }\n    }, [_c("span", {\n      staticClass: "mx-3"\n    }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemPleaseSelect")))])]) : _vm._e(), _vm._v(" "), _vm.hasEmptyOption ? _c("div", {\n      staticClass: "v-s-box bg-white empty-option",\n      class: {\n        active: _vm.selectedAttributes[attribute.attributeId] === null,\n        invalid: !_vm.isAttributeSelectionValid(attribute.attributeId, null, true)\n      },\n      attrs: {\n        "data-testing": "variation-select-box"\n      },\n      on: {\n        click: function click($event) {\n          return _vm.selectAttribute(attribute.attributeId, null);\n        }\n      }\n    }, [_c("span", {\n      staticClass: "mx-3"\n    }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemNoSelection")))])]) : _vm._e(), _vm._v(" "), _vm._l(attribute.values, function (value) {\n      return _c("div", {\n        directives: [{\n          name: "tooltip",\n          rawName: "v-tooltip",\n          value: true,\n          expression: "true"\n        }],\n        key: value.attributeValueId,\n        staticClass: "v-s-box bg-white",\n        class: {\n          active: value.attributeValueId === _vm.selectedAttributes[attribute.attributeId],\n          invalid: !_vm.isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true)\n        },\n        attrs: {\n          "data-testing": "variation-select-box",\n          "data-html": "true",\n          "data-toggle": "tooltip",\n          "data-placement": "top",\n          "data-original-title": _vm.getTooltip(attribute, value)\n        },\n        on: {\n          click: function click($event) {\n            return _vm.selectAttribute(attribute.attributeId, value.attributeValueId);\n          }\n        }\n      }, [attribute.type === "box" ? _c("span", {\n        staticClass: "mx-3"\n      }, [_vm._v(_vm._s(value.name))]) : _c("img", {\n        staticClass: "p-1",\n        attrs: {\n          src: value.imageUrl,\n          alt: value.name\n        }\n      })]);\n    })], 2)]) : _vm._e()]);\n  }), _vm._v(" "), _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible ? _c("div", {\n    staticClass: "col-12 variation-select"\n  }, [_c("div", {\n    staticClass: "input-unit"\n  }, [_c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      id: "unit-combination-ids-select",\n      "data-testing": "variation-select-unit"\n    },\n    on: {\n      change: function change($event) {\n        return _vm.selectUnit($event.target.value);\n      }\n    }\n  }, _vm._l(_vm.possibleUnitCombinationIds, function (unitCombinationId) {\n    return _c("option", {\n      key: unitCombinationId,\n      domProps: {\n        value: unitCombinationId,\n        selected: parseInt(unitCombinationId) === _vm.selectedUnit\n      }\n    }, [_vm.isUnitSelectionValid(unitCombinationId) ? [_vm._v("\\n                            " + _vm._s(_vm.possibleUnits[unitCombinationId]) + "\\n                        ")] : [_vm._v("\\n                            " + _vm._s(_vm.$translate("Ceres::Template.singleItemInvalidAttribute", {\n      name: _vm.possibleUnits[unitCombinationId]\n    })) + "\\n                        ")]], 2);\n  }), 0), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "unit-combination-ids-select",\n      "data-testing": "variation-select-unit-label"\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemContent")))])])]) : _vm._e()] : [_vm._t("default")]], 2);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/VariationSelect.vue?vue&type=template&id=588c1887&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __webpack_require__(21249);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.values.js\nvar es_object_values = __webpack_require__(26833);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.join.js\nvar es_array_join = __webpack_require__(69600);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js\nvar es_array_filter = __webpack_require__(57327);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js\nvar es_array_find = __webpack_require__(69826);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.set.js\nvar es_set = __webpack_require__(70189);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(78783);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js\nvar es_object_keys = __webpack_require__(47941);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.sort.js\nvar es_array_sort = __webpack_require__(2707);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.entries.js\nvar es_object_entries = __webpack_require__(69720);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(74916);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(15306);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(47042);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(91038);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(82526);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(41817);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(32165);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/dom.js\nvar dom = __webpack_require__(26278);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(29413);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/VariationSelect.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar NotificationService = __webpack_require__(41841);\n/* harmony default export */ var VariationSelectvue_type_script_lang_js_ = ({\n  name: "variation-select",\n  props: {\n    forceContent: {\n      type: Boolean,\n      default: false\n    }\n  },\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      filteredVariationsCache: {},\n      lastContentCount: 0\n    };\n  },\n  mounted: function mounted() {\n    // initially check for valid selection and disable add to basket button\n    this.$store.commit("".concat(this.itemId, "/variationSelect/setIsVariationSelected"), !!this.currentSelection);\n  },\n  computed: {\n    currentVariation: function currentVariation() {\n      return this.$store.getters["".concat(this.itemId, "/currentItemVariation")];\n    },\n    currentVariationSelect: function currentVariationSelect() {\n      return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n    },\n    /**\n     * returns true if any variation has no attributes\n     */\n    hasEmptyOption: function hasEmptyOption() {\n      return this.variations.some(function (variation) {\n        return !variation.attributes.length;\n      });\n    },\n    addPleaseSelectOption: function addPleaseSelectOption() {\n      return App.config.item.showPleaseSelect;\n    },\n    /**\n     * returns the variation, based on the selected attributes / unit\n     * returns false if there are none or multiple results\n     */\n    currentSelection: function currentSelection() {\n      var filteredVariations = this.filterVariations(null, null, true);\n      if (filteredVariations.length === 1) {\n        return filteredVariations[0];\n      }\n      return false;\n    },\n    /**\n     * returns all units, selectable by current selection\n     * prop \'forceContent\' with value true will return all units, without filtering\n     */\n    possibleUnits: function possibleUnits() {\n      // use an object, to make the entries unique\n      var possibleUnits = {};\n      var variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n      var _iterator = _createForOfIteratorHelper(variations),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var variation = _step.value;\n          possibleUnits[variation.unitCombinationId] = variation.unitName;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return possibleUnits;\n    },\n    possibleUnitCombinationIds: function possibleUnitCombinationIds() {\n      return this.transformPossibleUnits(this.possibleUnits).map(function (value) {\n        return value[0];\n      });\n    },\n    isContentVisible: function isContentVisible() {\n      return !this.forceContent && !!this.currentSelection || this.forceContent;\n    },\n    hasSelection: function hasSelection() {\n      return !(0,utils/* isNullOrUndefined */.le)(this.selectedAttributes) && !Object.values(this.selectedAttributes).some(function (value) {\n        return value < 0;\n      });\n    },\n    attributes: function attributes() {\n      return this.currentVariationSelect && this.currentVariationSelect.attributes;\n    },\n    selectedAttributes: function selectedAttributes() {\n      return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n    },\n    selectedUnit: function selectedUnit() {\n      return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n    },\n    variations: function variations() {\n      return this.currentVariationSelect && this.currentVariationSelect.variations;\n    }\n  },\n  methods: {\n    /**\n     * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n     * @param {number} attributeId\n     * @param {[number, string, null]} attributeValueId\n     */\n    selectAttribute: function selectAttribute(attributeId, attributeValueId) {\n      attributeValueId = parseInt(attributeValueId) || null;\n      if (this.selectedAttributes[attributeId] !== attributeValueId) {\n        this.$store.commit("".concat(this.itemId, "/variationSelect/selectItemAttribute"), {\n          attributeId: attributeId,\n          attributeValueId: attributeValueId\n        });\n        this.onSelectionChange(attributeId, attributeValueId, null);\n      }\n    },\n    /**\n     * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n     * @param {[number, string]} unitId\n     */\n    selectUnit: function selectUnit(unitId) {\n      unitId = parseInt(unitId);\n      this.$store.commit("".concat(this.itemId, "/variationSelect/selectItemUnit"), unitId);\n      this.onSelectionChange(null, null, unitId);\n    },\n    onSelectionChange: function onSelectionChange(attributeId, attributeValueId, unitId) {\n      if (this.currentSelection) {\n        this.setVariation(this.currentSelection.variationId);\n      } else if (!this.hasSelection) {\n        // user switched back to "please select"\n        this.setVariation(0);\n      } else {\n        this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n      }\n      this.lastContentCount = this.possibleUnitCombinationIds.length;\n    },\n    /**\n     * changes the selected attributes / unit, to ensure a valid seelction\n     * @param {[number, null]} attributeId\n     * @param {[number, null]} attributeValueId\n     * @param {[number, null]} unitId\n     */\n    unsetInvalidSelection: function unsetInvalidSelection(attributeId, attributeValueId, unitId) {\n      var qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n      var closestVariations = this.getClosestVariations(qualifiedVariations);\n\n      // if the salable \'closestVariations\' is undefined, take the not-salable one\n      var closestVariation = closestVariations[0] || closestVariations[1];\n      if (!closestVariation) {\n        return;\n      }\n      var invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n      this.correctSelection(invalidSelection);\n    },\n    getTooltip: function getTooltip(attribute, attributeValue) {\n      if (!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true)) {\n        return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\n      } else if (attribute.type === "image") {\n        return this.$translate("Ceres::Template.singleItemAttributeTooltip", {\n          attribute: attribute.name,\n          value: attributeValue.name\n        });\n      }\n      return "";\n    },\n    /**\n     * returns a string for box tooltips, for not available options\n     * @param {number} attributeId\n     * @param {number} attributeValueId\n     */\n    getInvalidOptionTooltip: function getInvalidOptionTooltip(attributeId, attributeValueId) {\n      var qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n      var closestVariations = this.getClosestVariations(qualifiedVariations);\n      if (!closestVariations || closestVariations.length <= 0) {\n        return "";\n      }\n      var invalidSelections = [!!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null, !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null];\n      if (!!invalidSelections[0] && !!invalidSelections[1] && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length) {\n        // there is a non-salable variation with less changes\n        return this.$translate("Ceres::Template.singleItemNotSalable");\n      }\n      var invalidSelection = invalidSelections[0] || invalidSelections[1];\n      var names = [];\n      var _iterator2 = _createForOfIteratorHelper(invalidSelection.attributesToReset),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var attribute = _step2.value;\n          if (attribute.attributeId !== attributeId) {\n            names.push("<b>" + attribute.name + "</b>");\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (invalidSelection.newUnit) {\n        names.push("<b>" + this.$translate("Ceres::Template.singleItemContent") + "</b>");\n      }\n      if (!names.length) {\n        return null;\n      }\n      return this.$translate("Ceres::Template.singleItemNotAvailableInSelection", {\n        name: names.join(", ")\n      });\n    },\n    /**\n     * returns a list of variations, filtered by attribute or unit\n     * @param {[number, null]} attributeId\n     * @param {[number, null]} attributeValueId\n     * @param {[number, null]} unitId\n     */\n    getQualifiedVariations: function getQualifiedVariations(attributeId, attributeValueId, unitId) {\n      if ((0,utils/* isDefined */.$K)(attributeValueId)) {\n        return this.variations.filter(function (variation) {\n          return (0,utils/* isDefined */.$K)(variation.attributes.find(function (attribute) {\n            return attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId;\n          }));\n        });\n      } else if ((0,utils/* isDefined */.$K)(unitId)) {\n        return this.variations.filter(function (variation) {\n          return variation.unitCombinationId === unitId;\n        });\n      }\n      return this.variations.filter(function (variation) {\n        return !variation.attributes.length;\n      });\n    },\n    /**\n     * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\n     * @param {array} qualifiedVariations\n     */\n    getClosestVariations: function getClosestVariations(qualifiedVariations) {\n      var closestSalableVariation, numberOfSalableChanges;\n      var closestNonSalableVariation, numberOfNonSalableChanges;\n      var _iterator3 = _createForOfIteratorHelper(qualifiedVariations),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var variation = _step3.value;\n          var changes = 0;\n          if (variation.unitCombinationId !== this.selectedUnit && !(0,utils/* isNull */.Ft)(this.selectedUnit)) {\n            // when the unit dropdown isn\'t visible, it should have a lower weight for reset investigations\n            var unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\n            changes += unitWeight;\n          }\n          var _iterator4 = _createForOfIteratorHelper(variation.attributes),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var attribute = _step4.value;\n              if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId) {\n                changes++;\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          if (variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges)) {\n            closestSalableVariation = variation;\n            numberOfSalableChanges = changes;\n          } else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges)) {\n            closestNonSalableVariation = variation;\n            numberOfNonSalableChanges = changes;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return [closestSalableVariation, closestNonSalableVariation];\n    },\n    /**\n     * returns object with array \'attributesToReset\' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n     * @param {object} variation\n     */\n    getInvalidSelectionByVariation: function getInvalidSelectionByVariation(variation) {\n      var _this = this;\n      var attributesToReset = [];\n      var newUnit = null;\n      var _loop = function _loop(selectedAttributeId) {\n        selectedAttributeId = parseInt(selectedAttributeId);\n        var variationAttribute = variation.attributes.find(function (attribute) {\n          return attribute.attributeId === selectedAttributeId;\n        });\n        if (!(0,utils/* isNull */.Ft)(_this.selectedAttributes[selectedAttributeId])) {\n          if (variationAttribute && variationAttribute.attributeValueId !== _this.selectedAttributes[selectedAttributeId] || !variationAttribute) {\n            var attributeToReset = _this.attributes.find(function (attr) {\n              return attr.attributeId === selectedAttributeId;\n            });\n            attributesToReset.push(attributeToReset);\n          }\n        }\n      };\n      for (var selectedAttributeId in this.selectedAttributes) {\n        _loop(selectedAttributeId);\n      }\n      if (variation.unitCombinationId !== this.selectedUnit) {\n        newUnit = variation.unitCombinationId;\n      }\n      return {\n        attributesToReset: attributesToReset,\n        newUnit: newUnit\n      };\n    },\n    /**\n     * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n     * @param {object} invalidSelection\n     */\n    correctSelection: function correctSelection(invalidSelection) {\n      var messages = [];\n      var attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n      var _iterator5 = _createForOfIteratorHelper(invalidSelection.attributesToReset),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var attributeToReset = _step5.value;\n          messages.push(this.$translate("Ceres::Template.singleItemNotAvailable", {\n            name: attributeToReset.name\n          }));\n          attributes[attributeToReset.attributeId] = !this.hasEmptyOption && App.config.item.showPleaseSelect ? -1 : null;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      if (invalidSelection.newUnit) {\n        if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !(0,utils/* isNull */.Ft)(this.selectedUnit)) {\n          messages.push(this.$translate("Ceres::Template.singleItemNotAvailable", {\n            name: this.$translate("Ceres::Template.singleItemContent")\n          }));\n        }\n        this.$store.commit("".concat(this.itemId, "/variationSelect/selectItemUnit"), invalidSelection.newUnit);\n      }\n      this.$store.commit("".concat(this.itemId, "/variationSelect/setItemSelectedAttributes"), attributes);\n      this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n      NotificationService.warn(messages.join("<br>")).closeAfter(5000);\n    },\n    /**\n     * returns matching variations with current selection\n     * attributes and unitId could be filled, to check a specific selection\n     * @param {object} attributes\n     * @param {number} unitId\n     * @param {boolean} strict\n     */\n    filterVariations: function filterVariations(attributes, unitId, strict, ignoreUnit) {\n      var _this2 = this;\n      attributes = attributes || this.selectedAttributes;\n      unitId = unitId || this.selectedUnit;\n      strict = !!strict;\n      ignoreUnit = !!ignoreUnit;\n      var key = JSON.stringify(attributes) + "_" + unitId + "_" + strict + "_" + ignoreUnit;\n      if ((0,utils/* isDefined */.$K)(this.filteredVariationsCache[key])) {\n        return this.filteredVariationsCache[key];\n      }\n      var uniqueValues = _toConsumableArray(new Set(Object.values(attributes)));\n      var isEmptyOptionSelected = uniqueValues.length === 1 && (0,utils/* isNull */.Ft)(uniqueValues[0]);\n      var filteredVariations = this.variations.filter(function (variation) {\n        // the selected unit is not matching\n        if (!ignoreUnit && variation.unitCombinationId !== unitId) {\n          return false;\n        }\n\n        // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n        // requires more than 0 attributes\n        if ((!isEmptyOptionSelected && !variation.attributes.length || isEmptyOptionSelected && variation.attributes.length) && _this2.attributes.length > 0) {\n          return false;\n        }\n        var _loop2 = function _loop2(attributeId) {\n          var variationAttribute = variation.attributes.find(function (variationAttribute) {\n            return variationAttribute.attributeId === parseInt(attributeId);\n          });\n\n          // an attribute is not matching with selection\n          if (variationAttribute && variationAttribute.attributeValueId !== attributes[attributeId] && (strict || !strict && !(0,utils/* isNull */.Ft)(attributes[attributeId]) && attributes[attributeId] !== -1)) {\n            return {\n              v: false\n            };\n          }\n        };\n        for (var attributeId in attributes) {\n          var _ret = _loop2(attributeId);\n          if (_typeof(_ret) === "object") return _ret.v;\n        }\n        return true;\n      });\n      this.filteredVariationsCache[key] = filteredVariations;\n      return filteredVariations;\n    },\n    /**\n     * returns true, if the selection with a new attribute value would be valid\n     * @param {number} attributeId\n     * @param {[number, string, null]} attributeValueId\n     * @param {boolean} filterSalableVariations\n     */\n    isAttributeSelectionValid: function isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations) {\n      attributeValueId = parseInt(attributeValueId) || null;\n      if (this.selectedAttributes[attributeId] === attributeValueId) {\n        return true;\n      }\n      var selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n      selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n      var ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n      var variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\n      if (filterSalableVariations) {\n        variations = variations.filter(function (variation) {\n          return variation.isSalable;\n        });\n      }\n      return variations.length > 0;\n    },\n    /**\n     * returns true, if the selection with a new unitId would be valid\n     * @param {[number, string]} unitId\n     */\n    isUnitSelectionValid: function isUnitSelectionValid(unitId) {\n      unitId = parseInt(unitId);\n      if (this.selectedUnit === unitId) {\n        return true;\n      }\n      return this.filterVariations(null, unitId).filter(function (variation) {\n        return variation.isSalable;\n      }).length > 0;\n    },\n    /**\n     * dispatch vuex action \'loadVariation\' to archive a variation\n     * dispatches a custom event named \'onVariationChanged\'\n     * @param {[string, number, null]} variationId\n     */\n    setVariation: function setVariation(variationId) {\n      var _this3 = this;\n      if (!(0,utils/* isDefined */.$K)(variationId) && this.currentSelection) {\n        variationId = this.currentSelection.variationId;\n      }\n      if ((0,utils/* isDefined */.$K)(variationId)) {\n        this.$store.dispatch("".concat(this.itemId, "/loadVariation"), variationId).then(function (variation) {\n          document.dispatchEvent(new CustomEvent("onVariationChanged", {\n            detail: {\n              attributes: variation.attributes,\n              documents: variation.documents,\n              itemId: _this3.itemId\n            }\n          }));\n        });\n      }\n    },\n    isTextCut: function isTextCut(content) {\n      if (this.$refs.attributesContaner) {\n        return (0,dom/* textWidth */.$H)(content, "Custom-Font, Helvetica, Arial, sans-serif") > this.$refs.attributesContaner[0].clientWidth;\n      }\n      return false;\n    },\n    getSelectedAttributeValueName: function getSelectedAttributeValueName(attribute) {\n      var selectedAttributeValueId = this.selectedAttributes[attribute.attributeId];\n      var selectedAttributeValue = attribute.values.find(function (attrValue) {\n        return attrValue.attributeValueId === selectedAttributeValueId;\n      });\n      if (selectedAttributeValue) {\n        return selectedAttributeValue.name;\n      } else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1) {\n        return this.$translate("Ceres::Template.singleItemPleaseSelect");\n      }\n      return this.$translate("Ceres::Template.singleItemNoSelection");\n    },\n    transformPossibleUnits: function transformPossibleUnits(possibleUnits) {\n      var _this4 = this;\n      return Object.entries(possibleUnits).sort(function (unitA, unitB) {\n        unitA = _this4.splitUnitName(unitA[1]);\n        unitB = _this4.splitUnitName(unitB[1]);\n        // order by unit\n        if (unitA[1] < unitB[1]) {\n          return -1;\n        }\n        if (unitA[1] > unitB[1]) {\n          return 1;\n        }\n        // order by content (count)\n        if (unitA[0] < unitB[0]) {\n          return -1;\n        }\n        if (unitA[0] > unitB[0]) {\n          return 1;\n        }\n        return 0;\n      });\n    },\n    splitUnitName: function splitUnitName(unitName) {\n      var unitNameSplit = unitName.split(" ");\n      if (!isNaN(unitNameSplit[0])) {\n        unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, "");\n        unitNameSplit[0] = parseInt(unitNameSplit[0]);\n      }\n      return unitNameSplit;\n    }\n  },\n  watch: {\n    currentSelection: function currentSelection(value) {\n      this.$store.commit("".concat(this.itemId, "/variationSelect/setIsVariationSelected"), !!value);\n    },\n    variations: function variations() {\n      // FIX unset variation cache after subsequent variations are loaded\n      this.filteredVariationsCache = {};\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/VariationSelect.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_VariationSelectvue_type_script_lang_js_ = (VariationSelectvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(51900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/VariationSelect.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_VariationSelectvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var VariationSelect = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///75356\n')}}]);