{"version":3,"sources":["webpack:///./node_modules/feiertagejs/build/feiertage.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,iBAAiB,yBAAyB,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,sEAAsE,KAAK;AAC3E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO,uBAAuB,aAAa;AACtD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA,kBAAkB,aAAa;AAC/B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO,mBAAmB,sBAAsB;AAC3F;AACA;AACA;AACA,+CAA+C,kBAAkB;AACjE,uBAAuB,kBAAkB;AACzC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,YAAY,oBAAoB,uBAAuB;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,cAAc;AACdgBAAgB;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,oBAAoB,WAAW;AACnD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEiI;AACjI","file":"chunks/ceres-51.js","sourcesContent":["const germanTranslations = {\n    NEUJAHRSTAG: 'Neujahrstag',\n    HEILIGEDREIKOENIGE: 'Heilige Drei Könige',\n    KARFREITAG: 'Karfreitag',\n    OSTERSONNTAG: 'Ostersonntag',\n    OSTERMONTAG: 'Ostermontag',\n    TAG_DER_ARBEIT: 'Tag der Arbeit',\n    CHRISTIHIMMELFAHRT: 'Christi Himmelfahrt',\n    PFINGSTSONNTAG: 'Pfingstsonntag',\n    PFINGSTMONTAG: 'Pfingstmontag',\n    FRONLEICHNAM: 'Fronleichnam',\n    MARIAHIMMELFAHRT: 'Mariä Himmelfahrt',\n    DEUTSCHEEINHEIT: 'Tag der Deutschen Einheit',\n    REFORMATIONSTAG: 'Reformationstag',\n    ALLERHEILIGEN: 'Allerheiligen',\n    BUBETAG: 'Buß- und Bettag',\n    ERSTERWEIHNACHTSFEIERTAG: '1. Weihnachtstag',\n    ZWEITERWEIHNACHTSFEIERTAG: '2. Weihnachtstag',\n    WELTKINDERTAG: 'Weltkindertag',\n    WELTFRAUENTAG: 'Weltfrauentag',\n    AUGSBURGER_FRIEDENSFEST: 'Augsburger Friedensfest',\n};\n\nconst allHolidays = [\n    'NEUJAHRSTAG',\n    'HEILIGEDREIKOENIGE',\n    'KARFREITAG',\n    'OSTERSONNTAG',\n    'OSTERMONTAG',\n    'TAG_DER_ARBEIT',\n    'CHRISTIHIMMELFAHRT',\n    'MARIAHIMMELFAHRT',\n    'PFINGSTSONNTAG',\n    'PFINGSTMONTAG',\n    'FRONLEICHNAM',\n    'DEUTSCHEEINHEIT',\n    'REFORMATIONSTAG',\n    'ALLERHEILIGEN',\n    'BUBETAG',\n    'ERSTERWEIHNACHTSFEIERTAG',\n    'ZWEITERWEIHNACHTSFEIERTAG',\n    'WELTKINDERTAG',\n    'WELTFRAUENTAG',\n    'AUGSBURGER_FRIEDENSFEST',\n];\n\nconst allRegions = [\n    'BW',\n    'BY',\n    'BE',\n    'BB',\n    'HB',\n    'HE',\n    'HH',\n    'MV',\n    'NI',\n    'NW',\n    'RP',\n    'SL',\n    'SN',\n    'ST',\n    'SH',\n    'TH',\n    'BUND',\n    'AUGSBURG',\n    'ALL',\n];\n\n/*!\n * feiertage.js\n * @repository https://github.com/sfakir/feiertagejs\n * @docs https://github.com/sfakir/feiertagejs/blob/master/docs.md\n *\n * Copyright 2015-2021 Simon Fakir\n * Released under the MIT license\n */\n// translations\nconst defaultLanguage = 'de';\nlet currentLanguage = defaultLanguage;\nconst translations = {\n    de: germanTranslations,\n};\n/**\n * adds a translation for the holidays (e.g. english).\n * This also allows to override the German names.\n * Hint: Interpolates German for missing translations\n * @param {string} isoCode of the new language\n * @param {TranslationTable} newTranslation  map of {HolidayType} to translation stringg\n */\nfunction addTranslation(isoCode, newTranslation) {\n    const code = isoCode.toLowerCase();\n    const defaultTranslation = translations[defaultLanguage];\n    let missingFields = false;\n    // fill new Translation with default Language\n    for (const holiday of allHolidays) {\n        if (!newTranslation[holiday]) {\n            missingFields = true;\n            newTranslation[holiday] = defaultTranslation[holiday];\n        }\n    }\n    if (missingFields) {\n        console.warn('[feiertagejs] addTranslation: you did not add all holidays in your translation! Took German as fallback');\n    }\n    translations[code] = newTranslation;\n}\n/**\n * Set a language to default language\n * @param {string} isoCode\n */\nfunction setLanguage(isoCode) {\n    const code = isoCode.toLowerCase();\n    if (!translations[code]) {\n        throw new TypeError(`[feiertagejs] tried to set language to ${code} but the translation is missing. Please use addTranslation(isoCode,object) first`);\n    }\n    currentLanguage = isoCode;\n}\n/**\n * Get currently set language\n * @returns {string}\n */\nfunction getLanguage() {\n    return currentLanguage;\n}\n// holidays api\n/**\n * Checks if a specific date is sunday or holiday.\n * @param date\n * @param region\n * @returns {boolean}\n */\nfunction isSunOrHoliday(date, region) {\n    checkRegion(region);\n    return date.getDay() === 0 || isHoliday(date, region);\n}\n/**\n * Check is specific date is holiday.\n * @param date\n * @param {Region} region two character {@link Region} code\n * @returns {boolean}\n */\nfunction isHoliday(date, region) {\n    checkRegion(region);\n    const year = date.getFullYear();\n    const internalDate = toUtcTimestamp(date);\n    const holidays = getHolidaysAsUtcTimestamps(year, region);\n    return holidays.indexOf(internalDate) !== -1;\n}\nfunction getHolidayByDate(date, region = 'ALL') {\n    checkRegion(region);\n    const holidays = getHolidaysOfYear(date.getFullYear(), region);\n    return holidays.find((holiday) => holiday.equals(date));\n}\n// additional runtime checks\n/**\n * Checks if the given region is a valid {@link Region}.\n *\n * @param region {@link Region} to check\n * @throws {Error}\n * @private\n */\nfunction checkRegion(region) {\n    if (region === null || region === undefined) {\n        throw new Error(`Region must not be undefined or null`);\n    }\n    if (allRegions.indexOf(region) === -1) {\n        throw new Error(`Invalid region: ${region}! Must be one of ${allRegions.toString()}`);\n    }\n}\n/**\n * Checks if the given holidayName is a valid {@link HolidayType}.\n * @param holidayName {@link HolidayType} to check\n * @throws {Error}\n * @private\n */\nfunction checkHolidayType(holidayName) {\n    if (holidayName === null || holidayName === undefined) {\n        throw new TypeError('holidayName must not be null or undefined');\n    }\n    if (allHolidays.indexOf(holidayName) === -1) {\n        throw new Error(`feiertage.js: invalid holiday type \"${holidayName}\"! Must be one of ${allHolidays.toString()}`);\n    }\n}\nfunction isSpecificHoliday(date, holidayName, region = 'ALL') {\n    checkRegion(region);\n    checkHolidayType(holidayName);\n    const holidays = getHolidaysOfYear(date.getFullYear(), region);\n    const foundHoliday = holidays.find((holiday) => holiday.equals(date));\n    if (!foundHoliday) {\n        return false;\n    }\n    return foundHoliday.name === holidayName;\n}\n/**\n * Returns all holidays of a year in a {@link Region}.\n * @param year\n * @param region\n * @returns {Array.<Holiday>}\n */\nfunction getHolidays(year, region) {\n    let y;\n    if (typeof year === 'string') {\n        y = parseInt(year, 10);\n    }\n    else {\n        y = year;\n    }\n    checkRegion(region);\n    return getHolidaysOfYear(y, region);\n}\n/**\n *\n * @param {number} year\n * @param region\n * @returns {number[]}\n * @private\n */\nfunction getHolidaysAsUtcTimestamps(year, region) {\n    const holidays = getHolidaysOfYear(year, region);\n    return holidays.map((holiday) => toUtcTimestamp(holiday.date));\n}\n/**\n *\n * @param {number} year\n * @param region\n * @returns {{objects: Array.<Holiday>, integers}}\n * @private\n */\nfunction getHolidaysOfYear(year, region) {\n    const easterDate = getEasterDate(year);\n    const karfreitag = addDays(new Date(easterDate.getTime()), -2);\n    const ostermontag = addDays(new Date(easterDate.getTime()), 1);\n    const christiHimmelfahrt = addDays(new Date(easterDate.getTime()), 39);\n    const pfingstsonntag = addDays(new Date(easterDate.getTime()), 49);\n    const pfingstmontag = addDays(new Date(easterDate.getTime()), 50);\n    const holidays = [\n        ...getCommonHolidays(year),\n        newHoliday('KARFREITAG', karfreitag, ['ALL']),\n        newHoliday('OSTERMONTAG', ostermontag, ['ALL']),\n        newHoliday('CHRISTIHIMMELFAHRT', christiHimmelfahrt, ['ALL']),\n        newHoliday('PFINGSTMONTAG', pfingstmontag, ['ALL']),\n    ];\n    addHeiligeDreiKoenige(year, region, holidays);\n    addEasterAndPfingsten(year, region, easterDate, pfingstsonntag, holidays);\n    addFronleichnam(region, easterDate, holidays);\n    addMariaeHimmelfahrt(year, region, holidays);\n    addReformationstag(year, region, holidays);\n    addAllerheiligen(year, region, holidays);\n    addBussUndBetttag(year, region, holidays);\n    addWeltkindertag(year, region, holidays);\n    addWeltfrauenTag(year, region, holidays);\n    addRegionalHolidays(year, region, holidays);\n    return holidays.sort((a, b) => a.date.getTime() - b.date.getTime());\n}\nfunction getCommonHolidays(year) {\n    return [\n        newHoliday('NEUJAHRSTAG', makeDate(year, 1, 1), ['ALL']),\n        newHoliday('TAG_DER_ARBEIT', makeDate(year, 5, 1), ['ALL']),\n        newHoliday('DEUTSCHEEINHEIT', makeDate(year, 10, 3), ['ALL']),\n        newHoliday('ERSTERWEIHNACHTSFEIERTAG', makeDate(year, 12, 25), ['ALL']),\n        newHoliday('ZWEITERWEIHNACHTSFEIERTAG', makeDate(year, 12, 26), ['ALL']),\n    ];\n}\nfunction addRegionalHolidays(year, region, feiertageObjects) {\n    if (region === 'AUGSBURG') {\n        feiertageObjects.push(newHoliday('AUGSBURGER_FRIEDENSFEST', makeDate(year, 8, 8), ['ALL']));\n    }\n}\nfunction addHeiligeDreiKoenige(year, region, feiertageObjects) {\n    const validRegions = ['BW', 'BY', 'AUGSBURG', 'ST'];\n    if (validRegions.includes(region) || region === 'ALL') {\n        feiertageObjects.push(newHoliday('HEILIGEDREIKOENIGE', makeDate(year, 1, 6), validRegions));\n    }\n}\nfunction addEasterAndPfingsten(year, region, easterDate, pfingstsonntag, feiertageObjects) {\n    const validRegions = ['BB'];\n    if (validRegions.includes(region) || region === 'ALL') {\n        feiertageObjects.push(newHoliday('OSTERSONNTAG', easterDate, validRegions), newHoliday('PFINGSTSONNTAG', pfingstsonntag, validRegions));\n    }\n}\nfunction addFronleichnam(region, easterDate, holidays) {\n    const validRegions = ['BW', 'BY', 'AUGSBURG', 'HE', 'NW', 'RP', 'SL'];\n    if (validRegions.includes(region) || region === 'ALL') {\n        const fronleichnam = addDays(new Date(easterDate.getTime()), 60);\n        holidays.push(newHoliday('FRONLEICHNAM', fronleichnam, validRegions));\n    }\n}\nfunction addMariaeHimmelfahrt(year, region, holidays) {\n    const validRegions = ['SL', 'BY', 'AUGSBURG'];\n    if (validRegions.includes(region) || region === 'ALL') {\n        holidays.push(newHoliday('MARIAHIMMELFAHRT', makeDate(year, 8, 15), validRegions));\n    }\n}\nfunction addReformationstag(year, region, holidays) {\n    const validRegions = [\n        'NI',\n        'BB',\n        'MV',\n        'SN',\n        'ST',\n        'TH',\n        'HB',\n        'HH',\n        'NI',\n        'SH',\n    ];\n    if (year === 2017 || validRegions.includes(region) || region === 'ALL') {\n        holidays.push(newHoliday('REFORMATIONSTAG', makeDate(year, 10, 31), validRegions));\n    }\n}\nfunction addAllerheiligen(year, region, holidays) {\n    const validRegions = ['BW', 'BY', 'NW', 'RP', 'SL', 'AUGSBURG'];\n    if (validRegions.includes(region) || region === 'ALL') {\n        holidays.push(newHoliday('ALLERHEILIGEN', makeDate(year, 11, 1), validRegions));\n    }\n}\nfunction addBussUndBetttag(year, region, holidays) {\n    const validRegions = ['SN'];\n    if (region === 'SN' || region === 'ALL') {\n        // @todo write test\n        const bussbettag = getBussBettag(year);\n        holidays.push(newHoliday('BUBETAG', makeDate(bussbettag.getUTCFullYear(), bussbettag.getUTCMonth() + 1, bussbettag.getUTCDate()), validRegions));\n    }\n}\nfunction addWeltkindertag(year, region, holidays) {\n    if (year >= 2019 && (region === 'TH' || region === 'ALL')) {\n        holidays.push(newHoliday('WELTKINDERTAG', makeDate(year, 9, 20), ['ALL']));\n    }\n}\nfunction addWeltfrauenTag(year, region, feiertageObjects) {\n    if (year <= 2018) {\n        return;\n    }\n    if (region === 'BE' || region === 'ALL') {\n        // in Berlin ist der Weltfrauentag ein Feiertag seit 2018\n        feiertageObjects.push(newHoliday('WELTFRAUENTAG', makeDate(year, 3, 8), ['ALL']));\n    }\n    if (region === 'MV' && year >= 2023) {\n        // in MV wird der Weltfrauentag erst ab 2023 eingeführt\n        feiertageObjects.push(newHoliday('WELTFRAUENTAG', makeDate(year, 3, 8), ['ALL']));\n    }\n}\n/**\n * Calculates the Easter date of a given year.\n * @param year {number}\n * @returns {Date} Easter date\n * @private\n */\nfunction getEasterDate(year) {\n    const C = Math.floor(year / 100);\n    // tslint:disable:binary-expression-operand-order\n    // tslint generates false positives in the following blocks\n    const N = year - 19 * Math.floor(year / 19);\n    const K = Math.floor((C - 17) / 25);\n    let I = C - Math.floor(C / 4) - Math.floor((C - K) / 3) + 19 * N + 15;\n    I -= 30 * Math.floor(I / 30);\n    I -=\n        Math.floor(I / 28) *\n            (1 -\n                Math.floor(I / 28) *\n                    Math.floor(29 / (I + 1)) *\n                    Math.floor((21 - N) / 11));\n    let J = year + Math.floor(year / 4) + I + 2 - C + Math.floor(C / 4);\n    J -= 7 * Math.floor(J / 7);\n    const L = I - J;\n    const M = 3 + Math.floor((L + 40) / 44);\n    const D = L + 28 - 31 * Math.floor(M / 4);\n    // tslint:enable:binary-expression-operand-order\n    return new Date(year, M - 1, D);\n}\n/**\n * Computes the \"Buss- und Bettag\"'s date.\n * @param jahr {number}\n * @returns {Date} the year's \"Buss- und Bettag\" date\n * @private\n */\nfunction getBussBettag(jahr) {\n    const weihnachten = new Date(jahr, 11, 25, 12, 0, 0);\n    const ersterAdventOffset = 32;\n    let wochenTagOffset = weihnachten.getDay() % 7;\n    if (wochenTagOffset === 0) {\n        wochenTagOffset = 7;\n    }\n    const tageVorWeihnachten = wochenTagOffset + ersterAdventOffset;\n    let bbtag = new Date(weihnachten.getTime());\n    bbtag = addDays(bbtag, -tageVorWeihnachten);\n    return bbtag;\n}\n/**\n * Adds {@code days} days to the given {@link Date}.\n * @param date\n * @param days\n * @returns {Date}\n * @private\n */\nfunction addDays(date, days) {\n    const changedDate = new Date(date);\n    changedDate.setDate(date.getDate() + days);\n    return changedDate;\n}\n/**\n * Creates a new {@link Date}.\n * @param year\n * @param naturalMonth month (1-12)\n * @param day\n * @returns {Date}\n * @private\n */\nfunction makeDate(year, naturalMonth, day) {\n    return new Date(year, naturalMonth - 1, day);\n}\n/**\n *\n * @param name\n * @param date\n * @returns {Holiday}\n * @private\n */\nfunction newHoliday(name, date, regions) {\n    if (regions.length === 1 && regions[0] === 'ALL') {\n        regions = allRegions;\n    }\n    return {\n        name,\n        date,\n        dateString: localeDateObjectToDateString(date),\n        regions,\n        trans(lang = currentLanguage) {\n            throw new Error('Method deprecated. Please replace trans() with translate(). This method will be removed in the next major release.');\n        },\n        translate(lang = currentLanguage) {\n            return lang === undefined || lang === null\n                ? undefined\n                : translations[lang][this.name];\n        },\n        getNormalizedDate() {\n            return toUtcTimestamp(this.date);\n        },\n        equals(otherDate) {\n            const dateString = localeDateObjectToDateString(otherDate);\n            return this.dateString === dateString;\n        },\n    };\n}\n/**\n *\n * @param date\n * @returns {string}\n * @private\n */\nfunction localeDateObjectToDateString(date) {\n    const normalizedDate = new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000);\n    normalizedDate.setUTCHours(0, 0, 0, 0);\n    return normalizedDate.toISOString().slice(0, 10);\n}\n/**\n * Returns the UTC timestamp of the given date with hours, minutes, seconds, and milliseconds set to zero.\n * @param date\n * @returns {number} UTC timestamp\n */\nfunction toUtcTimestamp(date) {\n    const internalDate = new Date(date);\n    internalDate.setHours(0, 0, 0, 0);\n    return internalDate.getTime();\n}\n\nexport { addTranslation, getHolidayByDate, getHolidays, getLanguage, isHoliday, isSpecificHoliday, isSunOrHoliday, setLanguage };\n//# sourceMappingURL=feiertage.js.map\n"],"sourceRoot":""}