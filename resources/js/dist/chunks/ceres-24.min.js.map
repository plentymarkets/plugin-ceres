{"version":3,"sources":["webpack:///./resources/js/src/app/components/common/GoogleMaps.vue","webpack:///./resources/js/src/app/components/common/GoogleMaps.vue?99f8","webpack:///resources/js/src/app/components/common/GoogleMaps.vue","webpack:///./resources/js/src/app/components/common/GoogleMaps.vue?e21b"],"names":["render","_c","this","_self","ref","staticClass","class","aspectClass","scriptBlocked","_t","_e","_withStripped","props","address","type","String","required","lat","Number","lng","zoom","default","maptype","aspectRatio","data","computed","mounted","_this","$nextTick","createScript","then","initializeMap","catch","methods","_this2","Promise","resolve","reject","script","document","querySelector","isNullOrUndefined","whenConsented","createElement","id","src","concat","App","config","global","googleMapsApiKey","addEventListener","body","appendChild","window","google","getCoordinates","_this3","isLatValid","isNaN","isLngValid","maps","Geocoder","geocode","result","status","length","geometry","location","_this4","coordinates","map","Map","$refs","googleMapsContainer","center","mapTypeId","Marker","position","component"],"mappings":"kGAAA,IAAIA,EAAS,WACX,IACEC,EADQC,KACCC,MAAMF,GACjB,OAAOA,EACL,MACA,CACEG,IAAK,sBACLC,YAAa,mCACbC,MAPMJ,KAOKK,aAEb,CATQL,KASHM,cAAgBP,EAAG,MAAO,CATvBC,KAS4BO,GAAG,YAAa,GAT5CP,KASqDQ,QAIjEV,EAAOW,eAAgB,E,qCCd0L,ECYlM,CACfC,MAAA,CACAC,QACA,CACAC,KAAAC,OACAC,UAAA,GAEAC,IACA,CACAH,KAAAI,OACAF,UAAA,GAEAG,IACA,CACAL,KAAAI,OACAF,UAAA,GAEAI,KACA,CACAN,KAAAI,OACAG,QAAA,IAEAC,QACA,CACAR,KAAAC,OACAM,QAAA,WAEAE,YACA,CACAT,KAAAC,OACAM,QAAA,QAIAG,KAAA,WAEA,OACAhB,eAAA,IAIAiB,SACA,CACAlB,YAAA,WAEA,mBAAAgB,cAIAG,QAAA,WACA,IAAAC,EAAA,KACA,KAAAC,WAAA,WAEAD,EAAAE,eACAC,MAAA,WAEAH,EAAAI,mBAEAC,OAAA,mBAOAC,QACA,CACAJ,aAAA,WACA,IAAAK,EAAA,KACA,WAAAC,SAAA,SAAAC,EAAAC,GAEA,IAAAC,EAAAC,SAAAC,cAAA,0BAEAC,YAAAH,GAkBAI,YACA,oBACA,WAEAR,EAAA1B,eAAA,EACA,IAAA8B,EAAAC,SAAAI,cAAA,UAEAL,EAAAxB,KAAA,kBACAwB,EAAAM,GAAA,kBACAN,EAAAO,IAAA,+CAAAC,OAAAC,IAAAC,OAAAC,OAAAC,kBAEAZ,EAAAa,iBAAA,0BAAAf,EAAAE,MAAA,GACAA,EAAAa,iBAAA,2BAAAd,EAAAC,MAAA,GAEAC,SAAAa,KAAAC,YAAAf,MAEA,WAEAJ,EAAA1B,eAAA,MAjCA0B,EAAA1B,eAAA,EACAiC,YAAAa,OAAAC,QAGAjB,EAAAa,iBAAA,0BAAAf,EAAAE,MAAA,GAKAF,EAAAE,QA8BAkB,eAAA,WACA,IAAAC,EAAA,KACAC,GAAAC,MAAA,KAAA1C,MAAA,KAAAA,KAAA,SAAAA,IAAA,GACA2C,GAAAD,MAAA,KAAAxC,MAAA,KAAAA,KAAA,UAAAA,IAAA,IAEA,OAAAuC,GAAAE,EAEAzB,QAAAC,QAAA,CACAnB,IAAA,KAAAA,IACAE,IAAA,KAAAA,MAGA,KAAAN,SAAAyC,OAAAC,OAEA,IAAApB,SAAA,SAAAC,EAAAC,IAEA,IAAAkB,OAAAM,KAAAC,UACAC,QACA,CACAlD,QAAA4C,EAAA5C,UAEA,SAAAmD,EAAAC,GAEAD,KAAAE,OAAA,GAAAF,EAAA,GAAAG,SAEA/B,EAAA4B,EAAA,GAAAG,SAAAC,UAIA/B,UAOAF,QAAAE,UAGAN,cAAA,WACA,IAAAsC,EAAA,KACA,KAAAb,iBACA1B,MAAA,SAAAwC,GAEA,IAAAC,EAAA,IAAAhB,OAAAM,KAAAW,IAAAH,EAAAI,MAAAC,oBACA,CACAC,OAAAL,EACAlD,KAAAiD,EAAAjD,KACAwD,UAAAP,EAAA/C,UAGA,IAAAiC,OAAAM,KAAAgB,OACA,CACAN,MACAO,SAAAR,U,OC9KIS,EAAY,YACd,EACA/E,EHIoB,IGFpB,EACA,KACA,KACA,MAIa,UAAA+E,E","file":"chunks/ceres-24.min.js","sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    {\n      ref: \"googleMapsContainer\",\n      staticClass: \"maps-component position-relative\",\n      class: _vm.aspectClass,\n    },\n    [_vm.scriptBlocked ? _c(\"div\", [_vm._t(\"default\")], 2) : _vm._e()]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GoogleMaps.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GoogleMaps.vue?vue&type=script&lang=js\"","<template>\n    <div :class=\"aspectClass\" class=\"maps-component position-relative\" ref=\"googleMapsContainer\">\n        <div v-if=\"scriptBlocked\">\n            <slot></slot>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { whenConsented } from \"../../helper/whenConsented\";\nimport { isNullOrUndefined } from \"../../helper/utils\";\n\nexport default {\n    props: {\n        address:\n        {\n            type: String,\n            required: false\n        },\n        lat:\n        {\n            type: Number,\n            required: false\n        },\n        lng:\n        {\n            type: Number,\n            required: false\n        },\n        zoom:\n        {\n            type: Number,\n            default: 16\n        },\n        maptype:\n        {\n            type: String,\n            default: \"roadmap\"\n        },\n        aspectRatio:\n        {\n            type: String,\n            default: \"3-1\"\n        }\n    },\n\n    data: function()\n    {\n        return {\n            scriptBlocked: true\n        };\n    },\n\n    computed:\n    {\n        aspectClass()\n        {\n            return \"prop-\" + this.aspectRatio;\n        }\n    },\n\n    mounted()\n    {\n        this.$nextTick(() =>\n        {\n            this.createScript()\n                .then(() =>\n                {\n                    this.initializeMap();\n                })\n                .catch(() =>\n                {\n                    // Do nothing\n                });\n        });\n    },\n\n    methods:\n    {\n        createScript()\n        {\n            return new Promise((resolve, reject) =>\n            {\n                const script = document.querySelector(\"script#google-maps-api\");\n\n                if (!isNullOrUndefined(script))\n                {\n                    // script already injected...\n                    this.scriptBlocked = false;\n                    if (isNullOrUndefined(window.google))\n                    {\n                        // ...but not loaded yet\n                        script.addEventListener(\"load\", () => resolve(script), false);\n                    }\n                    else\n                    {\n                        // ..and fully loaded\n                        resolve(script);\n                    }\n                }\n                else\n                {\n                    // script not loaded\n                    whenConsented(\n                        \"media.googleMaps\",\n                        () =>\n                        {\n                            this.scriptBlocked = false;\n                            const script = document.createElement(\"script\");\n\n                            script.type = \"text/javascript\";\n                            script.id = \"google-maps-api\";\n                            script.src = `https://maps.googleapis.com/maps/api/js?key=${App.config.global.googleMapsApiKey}`;\n\n                            script.addEventListener(\"load\", () => resolve(script), false);\n                            script.addEventListener(\"error\", () => reject(script), false);\n\n                            document.body.appendChild(script);\n                        },\n                        () =>\n                        {\n                            this.scriptBlocked = true;\n                        });\n                }\n            });\n        },\n\n        getCoordinates()\n        {\n            const isLatValid = !isNaN(this.lat) && this.lat > -90 && this.lat < 90;\n            const isLngValid = !isNaN(this.lng) && this.lng > -180 && this.lng < 180;\n\n            if (isLatValid && isLngValid)\n            {\n                return Promise.resolve({\n                    lat: this.lat,\n                    lng: this.lng\n                });\n            }\n            else if(!!this.address && !!window.google)\n            {\n                return new Promise((resolve, reject) =>\n                {\n                    const geocoder = new google.maps.Geocoder();\n                    geocoder.geocode(\n                        {\n                            address: this.address\n                        },\n                        (result, status) =>\n                        {\n                            if(!!result && result.length > 0 && !!result[0].geometry)\n                            {\n                                resolve(result[0].geometry.location);\n                            }\n                            else\n                            {\n                                reject();\n                            }\n                        }\n                    );\n                });\n            }\n\n            return Promise.reject();\n        },\n\n        initializeMap()\n        {\n            this.getCoordinates()\n                .then((coordinates) =>\n                {\n                    const map = new google.maps.Map(this.$refs.googleMapsContainer,\n                        {\n                            center: coordinates,\n                            zoom  : this.zoom,\n                            mapTypeId: this.maptype\n                        });\n\n                    new google.maps.Marker(\n                        {\n                            map: map,\n                            position: coordinates\n                        });\n\n                });\n        }\n    }\n}\n</script>\n","import { render, staticRenderFns } from \"./GoogleMaps.vue?vue&type=template&id=71813e06\"\nimport script from \"./GoogleMaps.vue?vue&type=script&lang=js\"\nexport * from \"./GoogleMaps.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}