{"version":3,"file":"chunks/ceres-33.min.js","mappings":"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","sources":["webpack://Ceres/./node_modules/core-js/internals/object-to-array.js","webpack://Ceres/./node_modules/core-js/modules/es.object.entries.js","webpack://Ceres/./node_modules/core-js/modules/es.object.values.js","webpack://Ceres/./resources/js/src/app/components/item/VariationSelect.vue","webpack://Ceres/resources/js/src/app/components/item/VariationSelect.vue","webpack://Ceres/./resources/js/src/app/components/item/VariationSelect.vue?a30a","webpack://Ceres/./resources/js/src/app/components/item/VariationSelect.vue?4792"],"sourcesContent":["var DESCRIPTORS = require('../internals/descriptors');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar $propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\nvar propertyIsEnumerable = uncurryThis($propertyIsEnumerable);\nvar push = uncurryThis([].push);\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {\n        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.es/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    { staticClass: \"row\" },\n    [\n      _vm.attributes.length ||\n      (_vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible)\n        ? [\n            _vm._l(_vm.attributes, function (attribute, index) {\n              return _c(\n                \"div\",\n                { key: index, staticClass: \"col-12 variation-select\" },\n                [\n                  attribute.type === \"dropdown\"\n                    ? _c(\n                        \"div\",\n                        {\n                          ref: \"attributesContaner\",\n                          refInFor: true,\n                          staticClass: \"input-unit\",\n                        },\n                        [\n                          _c(\n                            \"select\",\n                            {\n                              staticClass: \"custom-select\",\n                              attrs: {\n                                id: \"custom-select_\" + attribute.name,\n                                \"data-testing\": \"variation-select-dropdown\",\n                              },\n                              on: {\n                                change: function ($event) {\n                                  return _vm.selectAttribute(\n                                    attribute.attributeId,\n                                    $event.target.value\n                                  )\n                                },\n                              },\n                            },\n                            [\n                              _vm.addPleaseSelectOption || !_vm.hasSelection\n                                ? _c(\"option\", { domProps: { value: -1 } }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    ),\n                                  ])\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.hasEmptyOption ||\n                              _vm.selectedAttributes[attribute.attributeId] ===\n                                null\n                                ? _c(\n                                    \"option\",\n                                    {\n                                      domProps: {\n                                        value: null,\n                                        selected:\n                                          _vm.selectedAttributes[\n                                            attribute.attributeId\n                                          ] === null,\n                                      },\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm._l(attribute.values, function (value) {\n                                return _c(\n                                  \"option\",\n                                  {\n                                    key: value.attributeValueId,\n                                    domProps: {\n                                      value: value.attributeValueId,\n                                      selected:\n                                        value.attributeValueId ===\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ],\n                                    },\n                                  },\n                                  [\n                                    _vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(value.name) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : _vm.isAttributeSelectionValid(\n                                          attribute.attributeId,\n                                          value.attributeValueId,\n                                          false\n                                        )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemNotSalableAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemInvalidAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ],\n                                  ],\n                                  2\n                                )\n                              }),\n                            ],\n                            2\n                          ),\n                          _vm._v(\" \"),\n                          _c(\n                            \"label\",\n                            {\n                              directives: [\n                                {\n                                  name: \"tooltip\",\n                                  rawName: \"v-tooltip\",\n                                  value: _vm.isTextCut(attribute.name),\n                                  expression: \"isTextCut(attribute.name)\",\n                                },\n                              ],\n                              attrs: {\n                                for: \"custom-select_\" + attribute.name,\n                                \"data-toggle\": \"tooltip\",\n                                \"data-placement\": \"top\",\n                                title: attribute.name,\n                                \"data-testing\":\n                                  \"variation-select-dropdown-label\",\n                              },\n                            },\n                            [_vm._v(_vm._s(attribute.name))]\n                          ),\n                        ]\n                      )\n                    : attribute.type === \"box\" || attribute.type === \"image\"\n                    ? _c(\"div\", [\n                        _c(\n                          \"span\",\n                          {\n                            staticClass: \"text-muted\",\n                            attrs: { \"data-testing\": \"attribute-name\" },\n                          },\n                          [_vm._v(_vm._s(attribute.name) + \":\")]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"b\",\n                          { attrs: { \"data-testing\": \"attribute-value\" } },\n                          [\n                            _vm._v(\n                              _vm._s(\n                                _vm.getSelectedAttributeValueName(attribute)\n                              )\n                            ),\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          {\n                            staticClass: \"v-s-boxes py-3\",\n                            class: { images: attribute.type === \"image\" },\n                          },\n                          [\n                            _vm.addPleaseSelectOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === -1,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        -1\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          -1\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemPleaseSelect\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        null,\n                                        true\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          null\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function (value) {\n                              return _c(\n                                \"div\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"tooltip\",\n                                      rawName: \"v-tooltip\",\n                                      value: true,\n                                      expression: \"true\",\n                                    },\n                                  ],\n                                  key: value.attributeValueId,\n                                  staticClass: \"v-s-box bg-white\",\n                                  class: {\n                                    active:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ],\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    ),\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\",\n                                    \"data-html\": \"true\",\n                                    \"data-toggle\": \"tooltip\",\n                                    \"data-placement\": \"top\",\n                                    \"data-original-title\": _vm.getTooltip(\n                                      attribute,\n                                      value\n                                    ),\n                                  },\n                                  on: {\n                                    click: function ($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        value.attributeValueId\n                                      )\n                                    },\n                                  },\n                                },\n                                [\n                                  attribute.type === \"box\"\n                                    ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                        _vm._v(_vm._s(value.name)),\n                                      ])\n                                    : _c(\"img\", {\n                                        staticClass: \"p-1\",\n                                        attrs: {\n                                          src: value.imageUrl,\n                                          alt: value.name,\n                                        },\n                                      }),\n                                ]\n                              )\n                            }),\n                          ],\n                          2\n                        ),\n                      ])\n                    : _vm._e(),\n                ]\n              )\n            }),\n            _vm._v(\" \"),\n            _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        attrs: {\n                          id: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit\",\n                        },\n                        on: {\n                          change: function ($event) {\n                            return _vm.selectUnit($event.target.value)\n                          },\n                        },\n                      },\n                      _vm._l(\n                        _vm.possibleUnitCombinationIds,\n                        function (unitCombinationId) {\n                          return _c(\n                            \"option\",\n                            {\n                              key: unitCombinationId,\n                              domProps: {\n                                value: unitCombinationId,\n                                selected:\n                                  parseInt(unitCombinationId) ===\n                                  _vm.selectedUnit,\n                              },\n                            },\n                            [\n                              _vm.isUnitSelectionValid(unitCombinationId)\n                                ? [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.possibleUnits[unitCombinationId]\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ]\n                                : [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemInvalidAttribute\",\n                                            {\n                                              name: _vm.possibleUnits[\n                                                unitCombinationId\n                                              ],\n                                            }\n                                          )\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ],\n                            ],\n                            2\n                          )\n                        }\n                      ),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"label\",\n                      {\n                        attrs: {\n                          for: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit-label\",\n                        },\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$translate(\"Ceres::Template.singleItemContent\")\n                          )\n                        ),\n                      ]\n                    ),\n                  ]),\n                ])\n              : _vm._e(),\n          ]\n        : [_vm._t(\"default\")],\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"row\">\n        <template v-if=\"attributes.length || (possibleUnitCombinationIds.length > 1 && isContentVisible)\">\n            <div class=\"col-12 variation-select\" v-for=\"(attribute, index) in attributes\" :key=\"index\">\n                <!-- dropdown -->\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\n                    <select :id=\"'custom-select_' + attribute.name\" class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\" data-testing=\"variation-select-dropdown\">\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\n                        <option\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\n                        <option\n                                v-for=\"value in attribute.values\"\n                                :value=\"value.attributeValueId\"\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\"\n                                :key=\"value.attributeValueId\">\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true)\">\n                                {{ value.name }}\n                            </template>\n                            <template v-else-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, false)\">\n                                {{ $translate(\"Ceres::Template.singleItemNotSalableAttribute\", { \"name\": value.name }) }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label :for=\"'custom-select_' + attribute.name\" v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\" data-testing=\"variation-select-dropdown-label\">{{ attribute.name }}</label>\n                </div>\n                <!-- /dropdown -->\n\n                <!-- box and image -->\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n                    <span class=\"text-muted\" data-testing=\"attribute-name\">{{ attribute.name }}:</span> <b data-testing=\"attribute-value\">{{ getSelectedAttributeValueName(attribute) }}</b>\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"addPleaseSelectOption\"\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n                        </div>\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"hasEmptyOption\"\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null, true) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n                        </div>\n\n                        <div class=\"v-s-box bg-white\"\n                             data-testing=\"variation-select-box\"\n                             v-for=\"value in attribute.values\"\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) }\"\n                             v-tooltip=\"true\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getTooltip(attribute, value)\"\n                             :key=\"value.attributeValueId\">\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n                        </div>\n                    </div>\n                </div>\n                <!-- /box and image -->\n            </div>\n\n            <!-- units -->\n            <div class=\"col-12 variation-select\" v-if=\"possibleUnitCombinationIds.length > 1 && isContentVisible\">\n                <div class=\"input-unit\">\n                    <select id=\"unit-combination-ids-select\" class=\"custom-select\" @change=\"selectUnit($event.target.value)\" data-testing=\"variation-select-unit\">\n                        <option\n                                v-for=\"unitCombinationId in possibleUnitCombinationIds\"\n                                :value=\"unitCombinationId\"\n                                :selected=\"parseInt(unitCombinationId) === selectedUnit\"\n                                :key=\"unitCombinationId\">\n                            <template v-if=\"isUnitSelectionValid(unitCombinationId)\">\n                                {{ possibleUnits[unitCombinationId] }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": possibleUnits[unitCombinationId] }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label for=\"unit-combination-ids-select\" data-testing=\"variation-select-unit-label\">{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\n                </div>\n            </div>\n            <!-- /units -->\n        </template>\n\n        <template v-else>\n            <slot></slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { textWidth } from \"../../helper/dom\";\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n    name: \"variation-select\",\n\n    props: {\n        forceContent:\n        {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    inject: {\n        itemId: {\n            default: null\n        }\n    },\n\n    data()\n    {\n        return {\n            filteredVariationsCache: {},\n            lastContentCount: 0\n        };\n    },\n\n    mounted()\n    {\n        // initially check for valid selection and disable add to basket button\n        this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\n    },\n\n    computed:\n    {\n        currentVariation() {\n            return this.$store.getters[`${this.itemId}/currentItemVariation`];\n        },\n\n        currentVariationSelect() {\n            return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n        },\n\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption()\n        {\n            return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption()\n        {\n            return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection()\n        {\n            const filteredVariations = this.filterVariations(null, null, true);\n\n            if (filteredVariations.length === 1)\n            {\n                return filteredVariations[0];\n            }\n\n            return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits()\n        {\n            // use an object, to make the entries unique\n            const possibleUnits = {};\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n            for (const variation of variations)\n            {\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\n            }\n\n            return possibleUnits;\n        },\n\n        possibleUnitCombinationIds()\n        {\n            return this.transformPossibleUnits(this.possibleUnits).map(value => value[0]);\n        },\n\n        isContentVisible()\n        {\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection()\n        {\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        attributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.attributes;\n        },\n\n        selectedAttributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n        },\n\n        selectedUnit() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n        },\n\n        variations() {\n            return this.currentVariationSelect && this.currentVariationSelect.variations;\n        }\n    },\n\n    methods:\n    {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\n            {\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, { attributeId, attributeValueId });\n                this.onSelectionChange(attributeId, attributeValueId, null);\n            }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId)\n        {\n            unitId = parseInt(unitId);\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\n            this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId)\n        {\n            if (this.currentSelection)\n            {\n                this.setVariation(this.currentSelection.variationId);\n            }\n            else if (!this.hasSelection)\n            {\n                // user switched back to \"please select\"\n                this.setVariation(0);\n            }\n            else\n            {\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n            }\n\n            this.lastContentCount = this.possibleUnitCombinationIds.length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n            const closestVariations = this.getClosestVariations(qualifiedVariations);\n            \n            // if the salable 'closestVariations' is undefined, take the not-salable one\n            const closestVariation = closestVariations[0] || closestVariations[1];\n\n            if (!closestVariation)\n            {\n                return;\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n            this.correctSelection(invalidSelection);\n        },\n\n        getTooltip(attribute, attributeValue)\n        {\n            if(!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true))\n            {\n                return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\n            }\n            else if(attribute.type === \"image\")\n            {\n                return this.$translate(\"Ceres::Template.singleItemAttributeTooltip\", {\n                    attribute: attribute.name,\n                    value: attributeValue.name\n                });\n            }\n\n            return \"\";\n        },\n\n        /**\n         * returns a string for box tooltips, for not available options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n            const closestVariations   = this.getClosestVariations(qualifiedVariations);\n\n            if (!closestVariations || closestVariations.length <= 0)\n            {\n                return \"\";\n            }\n\n            const invalidSelections = [\n                !!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null,\n                !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null\n            ];\n\n            if (!!invalidSelections[0]\n                && !!invalidSelections[1]\n                && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length)\n            {\n                // there is a non-salable variation with less changes\n                return this.$translate(\"Ceres::Template.singleItemNotSalable\");\n            }\n\n            const invalidSelection = invalidSelections[0] || invalidSelections[1];\n            const names = [];\n\n            for (const attribute of invalidSelection.attributesToReset)\n            {\n                if (attribute.attributeId !== attributeId)\n                {\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\n                }\n            }\n            if (invalidSelection.newUnit)\n            {\n                names.push(\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n                );\n            }\n\n            if (!names.length)\n            {\n                return null;\n            }\n\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\n        {\n            if (isDefined(attributeValueId))\n            {\n                return this.variations.filter(variation =>\n                {\n                    return isDefined(variation.attributes.find(attribute =>\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n                });\n            }\n            else if (isDefined(unitId))\n            {\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\n            }\n\n            return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariations(qualifiedVariations)\n        {\n            let closestSalableVariation, numberOfSalableChanges;\n            let closestNonSalableVariation, numberOfNonSalableChanges;\n\n            for (const variation of qualifiedVariations)\n            {\n                let changes = 0;\n\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\n                {\n                    // when the unit dropdown isn't visible, it should have a lower weight for reset investigations\n                    const unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\n\n                    changes += unitWeight;\n                }\n\n                for (const attribute of variation.attributes)\n                {\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\n                    {\n                        changes++;\n                    }\n                }\n\n                if(variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges))\n                {\n                    closestSalableVariation = variation;\n                    numberOfSalableChanges = changes;\n                }\n                else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges))\n                {\n                    closestNonSalableVariation = variation;\n                    numberOfNonSalableChanges = changes;\n                }\n            }\n\n            return [closestSalableVariation, closestNonSalableVariation];\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation)\n        {\n            const attributesToReset = [];\n            let newUnit = null;\n\n            for (let selectedAttributeId in this.selectedAttributes)\n            {\n                selectedAttributeId = parseInt(selectedAttributeId);\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\n                {\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\n                    {\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                        attributesToReset.push(attributeToReset);\n                    }\n                }\n            }\n\n            if (variation.unitCombinationId !== this.selectedUnit)\n            {\n                newUnit = variation.unitCombinationId;\n            }\n\n            return { attributesToReset, newUnit };\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection)\n        {\n            const messages   = [];\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            for (const attributeToReset of invalidSelection.attributesToReset)\n            {\n                messages.push(\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\n                );\n\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n            }\n\n            if (invalidSelection.newUnit)\n            {\n                if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !isNull(this.selectedUnit))\n                {\n                    messages.push(\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\n                                this.$translate(\"Ceres::Template.singleItemContent\")\n                        })\n                    );\n                }\n\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\n            }\n\n            this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\n\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n            NotificationService.warn(\n                messages.join(\"<br>\")\n            ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit)\n        {\n            attributes = attributes || this.selectedAttributes;\n            unitId = unitId || this.selectedUnit;\n            strict = !!strict;\n            ignoreUnit = !!ignoreUnit;\n\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n            if (isDefined(this.filteredVariationsCache[key]))\n            {\n                return this.filteredVariationsCache[key];\n            }\n\n            const uniqueValues = [...new Set(Object.values(attributes))];\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n            const filteredVariations = this.variations.filter(variation =>\n            {\n                // the selected unit is not matching\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\n                {\n                    return false;\n                }\n\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n                // requires more than 0 attributes\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                    && this.attributes.length > 0)\n                {\n                    return false;\n                }\n\n                for (const attributeId in attributes)\n                {\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\n                        variationAttribute.attributeId === parseInt(attributeId));\n\n                    // an attribute is not matching with selection\n                    if (variationAttribute &&\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            this.filteredVariationsCache[key] = filteredVariations;\n\n            return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         * @param {boolean} filterSalableVariations\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n            if (this.selectedAttributes[attributeId] === attributeValueId)\n            {\n                return true;\n            }\n\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n            let variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\n\n            if (filterSalableVariations)\n            {\n                variations = variations.filter(variation => variation.isSalable)\n            }\n\n            return variations.length > 0;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId)\n        {\n            unitId = parseInt(unitId);\n            if (this.selectedUnit === unitId)\n            {\n                return true;\n            }\n\n            return this\n                .filterVariations(null, unitId)\n                .filter(variation => variation.isSalable)\n                .length > 0\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId)\n        {\n            if (!isDefined(variationId) && this.currentSelection)\n            {\n                variationId = this.currentSelection.variationId;\n            }\n\n            if (isDefined(variationId))\n            {\n                this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation =>\n                {\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                        {\n                            detail:\n                                {\n                                    attributes: variation.attributes,\n                                    documents: variation.documents,\n                                    itemId: this.itemId\n                                }\n                        }));\n                });\n            }\n        },\n\n        isTextCut(content)\n        {\n            if (this.$refs.attributesContaner)\n            {\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n            }\n\n            return false;\n        },\n\n        getSelectedAttributeValueName(attribute)\n        {\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n            if (selectedAttributeValue)\n            {\n                return selectedAttributeValue.name;\n            }\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\n            {\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n            }\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        },\n\n        transformPossibleUnits(possibleUnits)\n        {\n            return Object.entries(possibleUnits).sort((unitA, unitB) => {\n                unitA = this.splitUnitName(unitA[1]);\n                unitB = this.splitUnitName(unitB[1]);\n                // order by unit\n                if (unitA[1] < unitB[1]) {\n                    return -1;\n                }\n                if (unitA[1] > unitB[1]) {\n                    return 1;\n                }\n                // order by content (count)\n                if (unitA[0] < unitB[0]) {\n                    return -1;\n                }\n                if (unitA[0] > unitB[0]) {\n                    return 1;\n                }\n                return 0;\n            });\n        },\n        splitUnitName(unitName) {\n            const unitNameSplit = unitName.split(\" \");\n\n            if (!isNaN(unitNameSplit[0])) {\n                unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, \"\");\n                unitNameSplit[0] = parseInt(unitNameSplit[0]);\n            }\n\n            return unitNameSplit;\n        }\n    },\n\n    watch:\n    {\n        currentSelection(value)\n        {\n            this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\n        },\n        variations()\n        {\n            // FIX unset variation cache after subsequent variations are loaded\n            this.filteredVariationsCache = {};\n        }\n    }\n}\n</script>\n","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=588c1887&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["DESCRIPTORS","uncurryThis","objectKeys","toIndexedObject","propertyIsEnumerable","push","createMethod","TO_ENTRIES","it","key","O","keys","length","i","result","module","exports","entries","values","$","$entries","target","stat","$values","render","_vm","this","_c","_self","staticClass","attributes","possibleUnitCombinationIds","isContentVisible","_l","attribute","index","type","ref","refInFor","attrs","id","name","on","change","$event","selectAttribute","attributeId","value","addPleaseSelectOption","hasSelection","domProps","_v","_s","$translate","_e","hasEmptyOption","selectedAttributes","selected","attributeValueId","isAttributeSelectionValid","directives","rawName","isTextCut","expression","for","title","getSelectedAttributeValueName","class","images","active","invalid","click","getTooltip","src","imageUrl","alt","selectUnit","unitCombinationId","parseInt","selectedUnit","isUnitSelectionValid","possibleUnits","_t","_withStripped","NotificationService","require","props","forceContent","Boolean","default","inject","itemId","data","filteredVariationsCache","lastContentCount","mounted","$store","commit","concat","currentSelection","computed","currentVariation","getters","currentVariationSelect","state","items","variationSelect","variations","some","variation","App","config","item","showPleaseSelect","filteredVariations","filterVariations","_step","_iterator","_createForOfIteratorHelper","s","n","done","unitName","err","e","f","transformPossibleUnits","map","isNullOrUndefined","Object","methods","onSelectionChange","unitId","setVariation","variationId","unsetInvalidSelection","qualifiedVariations","getQualifiedVariations","closestVariations","getClosestVariations","closestVariation","invalidSelection","getInvalidSelectionByVariation","correctSelection","attributeValue","getInvalidOptionTooltip","invalidSelections","attributesToReset","_step2","names","_iterator2","newUnit","join","isDefined","filter","find","closestSalableVariation","numberOfSalableChanges","closestNonSalableVariation","numberOfNonSalableChanges","_step3","_iterator3","changes","isNull","_step4","_iterator4","isSalable","_this","_loop","selectedAttributeId","variationAttribute","attributeToReset","attr","_step5","messages","JSON","parse","stringify","_iterator5","warn","closeAfter","strict","ignoreUnit","_this2","uniqueValues","_toConsumableArray","Set","isEmptyOptionSelected","_loop2","v","_ret","_typeof","filterSalableVariations","_this3","dispatch","then","document","dispatchEvent","CustomEvent","detail","documents","content","$refs","attributesContaner","textWidth","clientWidth","selectedAttributeValueId","selectedAttributeValue","attrValue","_this4","sort","unitA","unitB","splitUnitName","unitNameSplit","split","isNaN","replace","currencyPattern","separator_thousands","watch"],"sourceRoot":""}