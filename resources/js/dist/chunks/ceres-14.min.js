"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[14],{8397:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ BasketTotals; }\n});\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(26699);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js\nvar es_string_includes = __webpack_require__(32023);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js\nvar es_function_name = __webpack_require__(68309);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/basket/BasketTotals.vue?vue&type=template&id=996bc3e2&\n\n\n\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "cmp-totals"\n  }, [_c("div", {\n    staticClass: "h3"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.basketSum")))]), _vm._v(" "), _c("div", {\n    staticClass: "component-loading with-icon refreshing",\n    class: {\n      "is-loading": _vm.isBasketLoading\n    }\n  }, [_c("dl", [_vm._t("before-item-sum"), _vm._v(" "), (_vm.visibleFields.includes("additionalCosts") || _vm.visibleFields.includes("basket.additional_costs")) && _vm.displayedProperties.length ? [_vm._l(_vm.displayedProperties, function (property) {\n    return [_c("dt", {\n      key: "property-name-" + property.propertyId,\n      class: {\n        "font-weight-bold": _vm.showNetPrices\n      },\n      attrs: {\n        "data-testing": "additionalcost-with-tax"\n      }\n    }, [_vm._v("\\n                        " + _vm._s(property.name) + "\\n                    ")]), _c("dd", {\n      key: "property-price-" + property.propertyId,\n      class: {\n        "font-weight-bold": _vm.showNetPrices\n      }\n    }, [_vm._v("\\n                        " + _vm._s(_vm._f("currency")(property.price)) + "\\n                    ")])];\n  })] : _vm._e(), _vm._v(" "), _vm.visibleFields.includes("basketValueNet") || _vm.visibleFields.includes("basket.value_of_items_net") ? [_c("dt", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketValue")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketNet")) + "\\n                ")]), _c("dd", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    },\n    attrs: {\n      "data-testing": "item-sum-net"\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.calculateBaseValue(_vm.basket.itemSumNet, _vm.basket.basketRebate))) + "\\n                ")])] : _vm._e(), _vm._v(" "), _vm.visibleFields.includes("basketValueGross") || _vm.visibleFields.includes("basket.value_of_items_gross") ? [_c("dt", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketValue")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketGross")) + "\\n                ")]), _c("dd", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    },\n    attrs: {\n      "data-testing": "item-sum"\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.calculateBaseValue(_vm.basket.itemSum, _vm.basket.basketRebate))) + "\\n                ")])] : _vm._e(), _vm._v(" "), (_vm.visibleFields.includes("rebate") || _vm.visibleFields.includes("basket.rebate")) && _vm.basket.basketRebate ? [_c("dt", {\n    staticClass: "rebate-hint"\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketRebate")) + "\\n                ")]), !_vm.showNetPrices ? _c("dd", {\n    staticClass: "rebate-hint"\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketRebateSign")) + _vm._s(_vm._f("currency")(_vm.calculateBaseValue(_vm.basket.itemSum, _vm.basket.basketRebate) - _vm.basket.itemSum)) + "\\n                ")]) : _c("dd", {\n    staticClass: "rebate-hint"\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketRebateSign")) + _vm._s(_vm._f("currency")(_vm.calculateBaseValue(_vm.basket.itemSumNet, _vm.basket.basketRebate) - _vm.basket.itemSumNet)) + "\\n                ")]), _vm._v(" "), _c("dt", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketSubTotal")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketNet")) + "\\n                ")]), _c("dd", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.basket.itemSumNet)) + "\\n                ")]), _vm._v(" "), _c("dt", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketSubTotal")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketGross")) + "\\n                ")]), _c("dd", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.basket.itemSum)) + "\\n                ")])] : _vm._e(), _vm._v(" "), _vm._t("after-item-sum"), _vm._v(" "), _vm._t("before-shipping-costs"), _vm._v(" "), _vm.visibleFields.includes("shippingCostsNet") || _vm.visibleFields.includes("basket.shipping_costs_net") ? [_c("dt", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketShippingCosts")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketNet")) + "\\n                ")]), _c("dd", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    },\n    attrs: {\n      "data-testing": "shipping-amount-net"\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.basket.shippingAmountNet)) + "\\n                ")])] : _vm._e(), _vm._v(" "), _vm.visibleFields.includes("shippingCostsGross") || _vm.visibleFields.includes("basket.shipping_costs_gross") ? [_c("dt", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketShippingCosts")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketGross")) + "\\n                ")]), _c("dd", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    },\n    attrs: {\n      "data-testing": "shipping-amount"\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.basket.shippingAmount)) + "\\n                ")])] : _vm._e(), _vm._v(" "), _vm._t("after-shipping-costs"), _vm._v(" "), (_vm.visibleFields.includes("promotionCoupon") || _vm.visibleFields.includes("basket.promotion_coupon")) && _vm.basket.couponCode && _vm.basket.couponCampaignType === "promotion" ? [_c("dt", {\n    staticClass: "font-weight-bold"\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketCoupon")) + "\\n                ")]), _c("dd", {\n    staticClass: "font-weight-bold",\n    attrs: {\n      "data-testing": "promotion-coupon"\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.basket.couponDiscount)) + "\\n                ")])] : _vm._e(), _vm._v(" "), _vm.visibleFields.includes("subAmount") || _vm.visibleFields.includes("basket.order_total_net") || _vm.visibleFields.includes("vats") || _vm.visibleFields.includes("basket.vat") ? _c("hr") : _vm._e(), _vm._v(" "), _vm._t("before-total-sum"), _vm._v(" "), _vm.visibleFields.includes("subAmount") || _vm.visibleFields.includes("basket.order_total_net") ? [_c("dt", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketSubAmount")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketNet")) + "\\n                ")]), _c("dd", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    },\n    attrs: {\n      "data-testing": "basket-sub-amount"\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(_vm.basket.subAmount)) + "\\n                ")])] : _vm._e(), _vm._v(" "), _vm._t("before-vat"), _vm._v(" "), _vm._l(_vm.basket.totalVats, function (totalVat) {\n    return _vm.visibleFields.includes("vats") || _vm.visibleFields.includes("basket.vat") ? [_c("dt", [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.basketVAT")) + " " + _vm._s(totalVat.vatValue) + "%\\n                ")]), _c("dd", {\n      attrs: {\n        "data-testing": "vat-amount"\n      }\n    }, [_vm._v("\\n                    " + _vm._s(_vm._f("currency")(totalVat.vatAmount)) + "\\n                ")])] : _vm._e();\n  }), _vm._v(" "), _vm._t("after-vat"), _vm._v(" "), (_vm.visibleFields.includes("additionalCosts") || _vm.visibleFields.includes("basket.additional_costs")) && _vm.displayedPropertiesWithoutTax.length ? [_vm._l(_vm.displayedPropertiesWithoutTax, function (property) {\n    return [_c("dt", {\n      key: "property-name-" + property.propertyId,\n      class: {\n        "font-weight-bold": _vm.showNetPrices\n      },\n      attrs: {\n        "data-testing": "additionalcost-without-tax"\n      }\n    }, [_vm._v("\\n                        " + _vm._s(property.name) + "\\n                    ")]), _c("dd", {\n      key: "property-price-" + property.propertyId,\n      class: {\n        "font-weight-bold": _vm.showNetPrices\n      }\n    }, [_vm._v("\\n                        " + _vm._s(_vm._f("currency")(property.price)) + "\\n                    ")])];\n  })] : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "totalSum"\n  }, [_c("hr"), _vm._v(" "), _vm.visibleFields.includes("totalSumNet") || _vm.visibleFields.includes("basket.order_total_net") ? [_c("dt", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    }\n  }, [_vm._v("\\n                        " + _vm._s(_vm.$translate("Ceres::Template.basketTotalSum")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketNet")) + "\\n                    ")]), _c("dd", {\n    class: {\n      "font-weight-bold": _vm.showNetPrices\n    },\n    attrs: {\n      "data-testing": "basket-amount-net"\n    }\n  }, [_vm._v("\\n                        " + _vm._s(_vm._f("currency")(_vm.basket.basketAmountNet)) + "\\n                    ")])] : _vm._e(), _vm._v(" "), _vm.visibleFields.includes("totalSumGross") || _vm.visibleFields.includes("basket.order_total_gross") ? [_c("dt", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    }\n  }, [_vm._v("\\n                        " + _vm._s(_vm.$translate("Ceres::Template.basketTotalSum")) + " " + _vm._s(_vm.$translate("Ceres::Template.basketGross")) + "\\n                    ")]), _c("dd", {\n    class: {\n      "font-weight-bold": !_vm.showNetPrices\n    },\n    attrs: {\n      "data-testing": "basket-amount"\n    }\n  }, [_vm._v("\\n                        " + _vm._s(_vm._f("currency")(_vm.basket.basketAmount)) + "\\n                    ")])] : _vm._e(), _vm._v(" "), (_vm.visibleFields.includes("salesCoupon") || _vm.visibleFields.includes("basket.sales_coupon")) && _vm.basket.couponCode && _vm.basket.couponCampaignType === "sales" ? [_c("dt", {\n    staticClass: "font-weight-bold"\n  }, [_vm._v("\\n                        " + _vm._s(_vm.$translate("Ceres::Template.basketCoupon")) + "\\n                    ")]), _c("dd", {\n    staticClass: "font-weight-bold",\n    attrs: {\n      "data-testing": "sales-coupon"\n    }\n  }, [_vm._v("\\n                        " + _vm._s(_vm._f("currency")(_vm.basket.couponDiscount)) + "\\n                    ")])] : _vm._e(), _vm._v(" "), (_vm.visibleFields.includes("openAmount") || _vm.visibleFields.includes("basket.open_amount")) && _vm.basket.couponCampaignType === "sales" ? [_c("dt", {\n    staticClass: "font-weight-bold"\n  }, [_vm._v("\\n                        " + _vm._s(_vm.$translate("Ceres::Template.basketOpenAmount")) + "\\n                    ")]), _c("dd", {\n    staticClass: "font-weight-bold",\n    attrs: {\n      "data-testing": "open-amount"\n    }\n  }, [_vm._v("\\n                        " + _vm._s(_vm._f("currency")(_vm.basket.openAmount)) + "\\n                    ")])] : _vm._e()], 2), _vm._v(" "), _vm._t("after-total-sum")], 2)]), _vm._v(" "), _vm.basket.isExportDelivery && _vm.deliveryExportTranslation ? _c("div", {\n    staticClass: "alert alert-info w-100"\n  }, [_vm._v("\\n        " + _vm._s(_vm.deliveryExportTranslation) + "\\n    ")]) : _vm._e()]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/BasketTotals.vue?vue&type=template&id=996bc3e2&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js\nvar es_array_find = __webpack_require__(69826);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(41539);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __webpack_require__(9653);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js\nvar web_dom_collections_for_each = __webpack_require__(54747);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.to-primitive.js\nvar es_symbol_to_primitive = __webpack_require__(96649);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-primitive.js\nvar es_date_to_primitive = __webpack_require__(96078);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(82526);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(41817);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-property.js\nvar es_object_define_property = __webpack_require__(69070);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js\nvar es_object_keys = __webpack_require__(47941);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js\nvar es_array_filter = __webpack_require__(57327);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\nvar es_object_get_own_property_descriptor = __webpack_require__(38880);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\nvar es_object_get_own_property_descriptors = __webpack_require__(49337);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-properties.js\nvar es_object_define_properties = __webpack_require__(33321);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(47042);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(91038);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(78783);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(74916);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(32165);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(66992);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(33948);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(20629);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/OrderPropertyHelper.js\nvar OrderPropertyHelper = __webpack_require__(20672);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/basket/BasketTotals.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n/* harmony default export */ var BasketTotalsvue_type_script_lang_js_ = ({\n  name: "basket-totals",\n  data: function data() {\n    return {\n      displayedProperties: [],\n      displayedPropertiesWithoutTax: []\n    };\n  },\n  created: function created() {\n    this.setPropertiesForTotals(this.basketItems);\n  },\n  watch: {\n    basketItems: {\n      deep: true,\n      handler: function handler(newItems) {\n        this.setPropertiesForTotals(newItems);\n      }\n    }\n  },\n  props: {\n    visibleFields: {\n      type: Array,\n      default: function _default() {\n        return ["basketValueNet", "basketValueGross", "rebate", "shippingCostsNet", "shippingCostsGross", "promotionCoupon", "totalSumNet", "vats", "additionalCosts", "totalSumGross", "salesCoupon", "openAmount", "subAmount"];\n      }\n    }\n  },\n  computed: _objectSpread({\n    currentShippingCountry: function currentShippingCountry() {\n      var shippingCountryId = this.basket.shippingCountryId;\n      return this.shippingCountries.find(function (country) {\n        return country.id === shippingCountryId;\n      });\n    },\n    shopCountry: function shopCountry() {\n      var shopCountryId = this.basket.shopCountryId;\n      return this.shippingCountries.find(function (country) {\n        return country.id === shopCountryId;\n      });\n    },\n    deliveryExportTranslation: function deliveryExportTranslation() {\n      var shopCountry = this.shopCountry && this.shopCountry.currLangName;\n      var currentShippingCountry = this.currentShippingCountry && this.currentShippingCountry.currLangName;\n      return this.$translate("Ceres::Template.basketExportDeliveryWarning", {\n        from: shopCountry,\n        to: currentShippingCountry\n      });\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    basket: function basket(state) {\n      return state.basket.data;\n    },\n    basketItems: function basketItems(state) {\n      return state.basket.items;\n    },\n    isBasketLoading: function isBasketLoading(state) {\n      return state.basket.isBasketLoading;\n    },\n    shippingCountries: function shippingCountries(state) {\n      return state.localization.shippingCountries;\n    },\n    showNetPrices: function showNetPrices(state) {\n      return state.basket.showNetPrices;\n    }\n  })),\n  methods: {\n    calculateBaseValue: function calculateBaseValue(value, percent) {\n      return value / (100 - percent) * 100;\n    },\n    isVariationProperty: function isVariationProperty(property) {\n      return property.property.isOderProperty && App.useVariationOrderProperties;\n    },\n    isInBasketItemOrderParams: function isInBasketItemOrderParams(basketItem, property) {\n      if (!property.property.isOderProperty && !App.useVariationOrderProperties) {\n        return true;\n      }\n      return !!basketItem.basketItemOrderParams.find(function (param) {\n        return Number(param.propertyId) === Number(property.propertyId);\n      });\n    },\n    setPropertiesForTotals: function setPropertiesForTotals(newBasketItems) {\n      var _this = this;\n      this.displayedPropertiesWithoutTax = [];\n      this.displayedProperties = [];\n      var _iterator = _createForOfIteratorHelper(newBasketItems),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var _basketItem$variation;\n          var basketItem = _step.value;\n          (_basketItem$variation = basketItem.variation.data.properties) === null || _basketItem$variation === void 0 ? void 0 : _basketItem$variation.forEach(function (property) {\n            if (_this.isInBasketItemOrderParams(basketItem, property) && ((0,OrderPropertyHelper/* isAdditionalCosts */.Lh)(property) || !(0,OrderPropertyHelper/* hasVat */.uP)(property) && App.useVariationOrderProperties)) {\n              var existsIndisplayedProperties = _this.displayedProperties.find(function (entry) {\n                return entry.propertyId === property.propertyId;\n              });\n              var existsIndisplayedPropertiesWithoutTax = _this.displayedPropertiesWithoutTax.find(function (entry) {\n                return entry.propertyId === property.propertyId;\n              });\n              var existingProperty = existsIndisplayedProperties || existsIndisplayedPropertiesWithoutTax;\n\n              // if new item gets added and its property already exist update quantity\n              if (existingProperty) {\n                existingProperty.quantity += basketItem.quantity;\n              } else {\n                var newProperty = {\n                  propertyId: property.propertyId,\n                  name: property.property.names.name,\n                  quantity: basketItem.quantity,\n                  surcharge: _this.$options.filters.propertySurcharge(basketItem.variation.data.properties, property.propertyId),\n                  vatId: property.property.vatId\n                };\n                !(0,OrderPropertyHelper/* hasVat */.uP)(property) ? _this.displayedPropertiesWithoutTax.push(newProperty) : _this.displayedProperties.push(newProperty);\n              }\n            }\n          });\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.displayedPropertiesWithoutTax.forEach(function (entry) {\n        entry.price = entry.quantity * entry.surcharge;\n      });\n      this.displayedProperties.forEach(function (entry) {\n        entry.price = entry.quantity * entry.surcharge;\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/BasketTotals.vue?vue&type=script&lang=js&\n /* harmony default export */ var basket_BasketTotalsvue_type_script_lang_js_ = (BasketTotalsvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(51900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/BasketTotals.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  basket_BasketTotalsvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var BasketTotals = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8397\n')}}]);