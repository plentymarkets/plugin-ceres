(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[28],{25314:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ButtonSizePropertyMixin; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82772);\n/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(92222);\n/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(47941);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82526);\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41817);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(41539);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(32165);\n/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(66992);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(78783);\n/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(33948);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(91038);\n/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(47042);\n/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(68309);\n/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(74916);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar BUTTON_SIZES = ["btn-sm", "btn-lg"];\nvar LEGACY_CLASS_MAP = {\n  "sm": "btn-sm",\n  "md": "",\n  "lg": "btn-lg"\n};\nvar ButtonSizePropertyMixin = {\n  props: {\n    buttonSize: {\n      type: [String, null],\n      default: null,\n      validator: function validator(value) {\n        return [""].concat(BUTTON_SIZES, _toConsumableArray(Object.keys(LEGACY_CLASS_MAP))).indexOf(value) !== -1;\n      }\n    }\n  },\n  computed: {\n    buttonSizeClass: function buttonSizeClass() {\n      if (LEGACY_CLASS_MAP.hasOwnProperty(this.buttonSize)) {\n        return LEGACY_CLASS_MAP[this.buttonSize];\n      }\n      return this.buttonSize;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUzMTQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTUEsWUFBWSxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztBQUV6QyxJQUFNQyxnQkFBZ0IsR0FBRztFQUNyQixJQUFJLEVBQUUsUUFBUTtFQUNkLElBQUksRUFBRSxFQUFFO0VBQ1IsSUFBSSxFQUFFO0FBQ1YsQ0FBQztBQUVNLElBQU1DLHVCQUF1QixHQUNwQztFQUNJQyxLQUFLLEVBQUU7SUFDSEMsVUFBVSxFQUNWO01BQ0lDLElBQUksRUFBRSxDQUFDQyxNQUFNLEVBQUUsSUFBSSxDQUFDO01BQ3BCQyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxTQUFTLEVBQUUsbUJBQUFDLEtBQUssRUFDaEI7UUFDSSxPQUFPLENBQ0gsRUFBRSxTQUNDVCxZQUFZLHFCQUNaVSxNQUFNLENBQUNDLElBQUksQ0FBQ1YsZ0JBQWdCLENBQUMsR0FDbENXLE9BQU8sQ0FBQ0gsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO01BQzNCO0lBQ0o7RUFDSixDQUFDO0VBRURJLFFBQVEsRUFBRTtJQUNOQyxlQUFlLDZCQUNmO01BQ0ksSUFBSWIsZ0JBQWdCLENBQUNjLGNBQWMsQ0FBQyxJQUFJLENBQUNYLFVBQVUsQ0FBQyxFQUNwRDtRQUNJLE9BQU9ILGdCQUFnQixDQUFDLElBQUksQ0FBQ0csVUFBVSxDQUFDO01BQzVDO01BRUEsT0FBTyxJQUFJLENBQUNBLFVBQVU7SUFDMUI7RUFDSjtBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DZXJlcy8uL3Jlc291cmNlcy9qcy9zcmMvYXBwL21peGlucy9idXR0b25TaXplUHJvcGVydHkubWl4aW4uanM/YzJkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCVVRUT05fU0laRVMgPSBbXCJidG4tc21cIiwgXCJidG4tbGdcIl07XG5cbmNvbnN0IExFR0FDWV9DTEFTU19NQVAgPSB7XG4gICAgXCJzbVwiOiBcImJ0bi1zbVwiLFxuICAgIFwibWRcIjogXCJcIixcbiAgICBcImxnXCI6IFwiYnRuLWxnXCJcbn07XG5cbmV4cG9ydCBjb25zdCBCdXR0b25TaXplUHJvcGVydHlNaXhpbiA9XG57XG4gICAgcHJvcHM6IHtcbiAgICAgICAgYnV0dG9uU2l6ZTpcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogW1N0cmluZywgbnVsbF0sXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdmFsaWRhdG9yOiB2YWx1ZSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIC4uLkJVVFRPTl9TSVpFUyxcbiAgICAgICAgICAgICAgICAgICAgLi4uT2JqZWN0LmtleXMoTEVHQUNZX0NMQVNTX01BUClcbiAgICAgICAgICAgICAgICBdLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBidXR0b25TaXplQ2xhc3MoKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoTEVHQUNZX0NMQVNTX01BUC5oYXNPd25Qcm9wZXJ0eSh0aGlzLmJ1dHRvblNpemUpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBMRUdBQ1lfQ0xBU1NfTUFQW3RoaXMuYnV0dG9uU2l6ZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1dHRvblNpemU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIkJVVFRPTl9TSVpFUyIsIkxFR0FDWV9DTEFTU19NQVAiLCJCdXR0b25TaXplUHJvcGVydHlNaXhpbiIsInByb3BzIiwiYnV0dG9uU2l6ZSIsInR5cGUiLCJTdHJpbmciLCJkZWZhdWx0IiwidmFsaWRhdG9yIiwidmFsdWUiLCJPYmplY3QiLCJrZXlzIiwiaW5kZXhPZiIsImNvbXB1dGVkIiwiYnV0dG9uU2l6ZUNsYXNzIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25314\n')},44699:function(module,__unused_webpack_exports,__webpack_require__){eval("var DESCRIPTORS = __webpack_require__(19781);\nvar uncurryThis = __webpack_require__(1702);\nvar objectKeys = __webpack_require__(81956);\nvar toIndexedObject = __webpack_require__(45656);\nvar $propertyIsEnumerable = (__webpack_require__(55296).f);\n\nvar propertyIsEnumerable = uncurryThis($propertyIsEnumerable);\nvar push = uncurryThis([].push);\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {\n        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ2OTkuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsS0FBMEI7QUFDcEQsa0JBQWtCLG1CQUFPLENBQUMsSUFBb0M7QUFDOUQsaUJBQWlCLG1CQUFPLENBQUMsS0FBMEI7QUFDbkQsc0JBQXNCLG1CQUFPLENBQUMsS0FBZ0M7QUFDOUQsNEJBQTRCLDhCQUF1RDs7QUFFbkY7QUFDQTs7QUFFQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DZXJlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXkuanM/NmY1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoJHByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUoTywga2V5KSkge1xuICAgICAgICBwdXNoKHJlc3VsdCwgVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44699\n")},26833:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("var $ = __webpack_require__(82109);\nvar $values = (__webpack_require__(44699).values);\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4MzMuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxtQkFBTyxDQUFDLEtBQXFCO0FBQ3JDLGNBQWMsbUNBQThDOztBQUU1RDtBQUNBO0FBQ0EsSUFBSSw4QkFBOEI7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NlcmVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzPzA3YWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXknKS52YWx1ZXM7XG5cbi8vIGBPYmplY3QudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoTyk7XG4gIH1cbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26833\n")},72683:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ AddressInputGroup; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=template&id=3aa29a85&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "row"\n  }, [_vm.value.showPickupStation && _vm.selectedCountry.isoCode2 === "DE" && _vm.addressType === "2" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("de", "delivery_address.salutation"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "de", "delivery_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("de", "delivery_address.name1") && !_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name1",\n      "data-validate": "text"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-testing": "packing-station-de-company"\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.title"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "de", "delivery_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("de", "delivery_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-testing": "packing-station-de-firstname"\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-testing": "packing-station-de-lastname"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.contactPerson"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "de", "delivery_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.name4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalName", "de", "delivery_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.phoneNumber"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "de", "delivery_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _vm.isParcelOrOfficeAvailable ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12"\n  }, [_c("input", {\n    attrs: {\n      type: "checkbox",\n      name: "togglePickup",\n      id: "showPickup" + _vm._uid\n    },\n    domProps: {\n      checked: _vm.value.showPickupStation\n    },\n    on: {\n      change: function change($event) {\n        return _vm.togglePickupStation($event.target.checked);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "showPickup" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressToPickupStation")))])])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "",\n      "data-model": "address1"\n    }\n  }, [_c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      id: "address1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      change: function change($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }, [_vm.isParcelBoxAvailable ? _c("option", {\n    attrs: {\n      value: "PACKSTATION"\n    },\n    domProps: {\n      selected: _vm.isPickupStation\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPackingStation")))]) : _vm._e(), _vm._v(" "), _vm.isPostOfficeAvailable ? _c("option", {\n    attrs: {\n      value: "POSTFILIALE"\n    },\n    domProps: {\n      selected: _vm.isPostOffice\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPostOffice")))]) : _vm._e()]), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "\'address1\' + _uid"\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPickupLocation")))])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _vm.isPickupStation ? _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPackingStationNumber")) + "*")]) : _vm._e(), _vm._v(" "), _vm.isPostOffice ? _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPostOfficeNumber")) + "*")]) : _vm._e()])])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postNumber"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "postnumber",\n      id: "postnumber" + _vm._uid,\n      "data-testing": "packing-station-de-postnumber"\n    },\n    domProps: {\n      value: _vm.value.postNumber\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postNumber", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "postnumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPostNummer")) + "*")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.address4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress2", "de", "delivery_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid,\n      "data-testing": "packing-station-de-postalcode"\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid,\n      "data-testing": "packing-station-de-town"\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.email"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "packing-station-de-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "de", "delivery_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "DE" && _vm.addressType === "1" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("de", "billing_address.salutation"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields,\n      "default-salutation": _vm.defaultSalutation\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "de", "billing_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("de", "billing_address.name1") && !_vm.isInOptionalFields("de", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "billing-address-de-company"\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("de", "billing_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("de", "billing_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("de", "billing_address.vatNumber") || !_vm.isInOptionalFields("de", "billing_address.salutation") && _vm.isInOptionalFields("de", "billing_address.name1") && _vm.isInOptionalFields("de", "billing_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12",\n    attrs: {\n      "data-testing": "billing-address-de-name-inputs"\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.title"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "billing-address-de-title"\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "de", "billing_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("de", "billing_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "billing_address"),\n      expression: "areNameFieldsRequired(\'de\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "billing-address-de-firstname"\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("de", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "billing_address"),\n      expression: "areNameFieldsRequired(\'de\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-testing": "billing-address-de-lastname"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("de", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.contactPerson"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "de", "billing_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.name4"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalName", "de", "billing_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.birthday") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:date",\n      value: _vm.isInRequiredFields("de", "billing_address.birthday") || !!_vm.value.birthday && !!_vm.value.birthday.length,\n      expression: "isInRequiredFields(\'de\', \'billing_address.birthday\') || !!value.birthday && !!value.birthday.length",\n      arg: "date"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "birthday"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "date",\n      min: "1901-12-14",\n      max: new Date().toISOString().split("T")[0],\n      name: "birthday",\n      placeholder: _vm.$translate("Ceres::Template.addressBirthdatePlaceholder"),\n      id: "txtBirthdate" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.birthday\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("birthday", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtBirthdate" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressBirthdate", "de", "billing_address.birthday")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.phoneNumber"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "de", "billing_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _c("div", {\n    staticClass: "col-12",\n    attrs: {\n      "data-testing": "billing-address-de-street-inputs"\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid,\n      "data-testing": "billing-address-de-street"\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressStreet")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid,\n      "data-testing": "billing-address-de-house-number"\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressNumber")) + "*")])])])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.address3"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress1", "de", "billing_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.address4"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress2", "de", "billing_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid,\n      "data-testing": "billing-address-de-zip"\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid,\n      "data-testing": "billing-address-de-town"\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.email"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "billing-address-de-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "de", "billing_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "GB" && _vm.addressType === "1" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("gb", "billing_address.salutation"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "gb", "billing_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("gb", "billing_address.name1") && !_vm.isInOptionalFields("gb", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("gb", "billing_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("gb", "billing_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("gb", "billing_address.vatNumber") || !_vm.isInOptionalFields("gb", "billing_address.salutation") && _vm.isInOptionalFields("gb", "billing_address.name1") && _vm.isInOptionalFields("gb", "billing_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.title"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "gb", "billing_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("gb", "billing_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "billing_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-model": "name2",\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("gb", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "billing_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-model": "name3"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("gb", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.contactPerson"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "gb", "billing_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.name4") ? _c("div", {\n    staticClass: "col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.name4"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressGBNameAffix", "gb", "billing_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.birthday") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:date",\n      value: _vm.isInRequiredFields("gb", "billing_address.birthday") || !!_vm.value.birthday && !!_vm.value.birthday.length,\n      expression: "isInRequiredFields(\'gb\', \'billing_address.birthday\') || !!value.birthday && !!value.birthday.length",\n      arg: "date"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "birthday"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "date",\n      min: "1901-12-14",\n      max: new Date().toISOString().split("T")[0],\n      name: "birthday",\n      placeholder: _vm.$translate("Ceres::Template.addressBirthdatePlaceholder"),\n      id: "txtBirthdate" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.birthday\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("birthday", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtBirthdate" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressBirthdate", "gb", "billing_address.birthday")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.phoneNumber"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "gb", "billing_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _c("div", {\n    staticClass: "col-12",\n    attrs: {\n      "data-testing": "invoice-addresses-street-select-gb"\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressENAddressLine1")) + "*")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.address2") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.address2"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.address2\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine2", "gb", "billing_address.address2")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.address3"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine3", "gb", "billing_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.address4"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine4", "gb", "billing_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.email"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "billing-address-gb-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "gb", "billing_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "DE" && _vm.addressType === "2" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("de", "delivery_address.salutation"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "de", "delivery_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("de", "delivery_address.name1") && !_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("de", "delivery_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("de", "delivery_address.vatNumber") || !_vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.isInOptionalFields("de", "delivery_address.name1") && _vm.isInOptionalFields("de", "delivery_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.title"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "de", "delivery_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("de", "delivery_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "delivery-address-de-firstname"\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-testing": "delivery-address-de-lastname"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.contactPerson"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "de", "delivery_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.name4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalName", "de", "delivery_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.phoneNumber"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "de", "delivery_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _vm.isParcelOrOfficeAvailable ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12"\n  }, [_c("input", {\n    attrs: {\n      type: "checkbox",\n      name: "togglePickup",\n      id: "showPickup" + _vm._uid\n    },\n    domProps: {\n      checked: _vm.value.showPickupStation\n    },\n    on: {\n      change: function change($event) {\n        return _vm.togglePickupStation($event.target.checked);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "showPickup" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressToPickupStation")))])])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid,\n      "data-testing": "delivery-address-de-street"\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressStreet")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid,\n      "data-testing": "delivery-address-de-housenumber"\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressNumber")) + "*")])])])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.address3"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress1", "de", "delivery_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.address4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress2", "de", "delivery_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid,\n      "data-testing": "delivery-address-de-zip"\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid,\n      "data-testing": "delivery-address-de-town"\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.email"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "delivery-address-de-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "de", "delivery_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "GB" && _vm.addressType === "2" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("gb", "delivery_address.salutation"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "gb", "delivery_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("gb", "delivery_address.name1") && !_vm.isInOptionalFields("gb", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("gb", "delivery_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("gb", "delivery_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("gb", "delivery_address.vatNumber") || !_vm.isInOptionalFields("gb", "delivery_address.salutation") && _vm.isInOptionalFields("gb", "delivery_address.name1") && _vm.isInOptionalFields("gb", "delivery_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.title"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "gb", "delivery_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("gb", "delivery_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "delivery_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("gb", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "delivery_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("gb", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.contactPerson"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "gb", "delivery_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.name4"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressGBNameAffix", "gb", "delivery_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.phoneNumber"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "gb", "delivery_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressENAddressLine1")) + "*")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.address2") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.address2"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.address2\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine2", "gb", "delivery_address.address2")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.address3"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine3", "gb", "delivery_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.address4"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine4", "gb", "delivery_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.email"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "delivery-address-gb-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "gb", "delivery_address.email")))])])]) : _vm._e()])])] : _vm._e()], 2);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=template&id=3aa29a85&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js\nvar es_array_index_of = __webpack_require__(82772);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(26699);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js\nvar es_string_includes = __webpack_require__(32023);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.to-primitive.js\nvar es_symbol_to_primitive = __webpack_require__(96649);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-primitive.js\nvar es_date_to_primitive = __webpack_require__(96078);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(82526);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(41817);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(41539);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __webpack_require__(9653);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-property.js\nvar es_object_define_property = __webpack_require__(69070);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js\nvar es_object_keys = __webpack_require__(47941);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js\nvar es_array_filter = __webpack_require__(57327);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\nvar es_object_get_own_property_descriptor = __webpack_require__(38880);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js\nvar web_dom_collections_for_each = __webpack_require__(54747);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\nvar es_object_get_own_property_descriptors = __webpack_require__(49337);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-properties.js\nvar es_object_define_properties = __webpack_require__(33321);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(32165);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(66992);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(78783);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(33948);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(20629);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js\nvar es_function_name = __webpack_require__(68309);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=template&id=7efc2198&\n\nvar SalutationSelectvue_type_template_id_7efc2198_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      "data-testing": "salutation-select",\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.addressData.gender\n    },\n    on: {\n      change: function change($event) {\n        return _vm.emitInputEvent($event.target.value);\n      }\n    }\n  }, _vm._l(_vm.currentSalutation, function (salutation, index) {\n    return _c("option", {\n      key: index,\n      domProps: {\n        value: salutation.key,\n        selected: _vm.addressData.gender === salutation.key && _vm.checkGenderCompany(salutation.key)\n      }\n    }, [_vm._v("\\n        " + _vm._s(salutation.name) + "\\n    ")]);\n  }), 0);\n};\nvar SalutationSelectvue_type_template_id_7efc2198_staticRenderFns = [];\nSalutationSelectvue_type_template_id_7efc2198_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=template&id=7efc2198&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-int.js\nvar es_parse_int = __webpack_require__(91058);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __webpack_require__(21249);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(29413);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var SalutationSelectvue_type_script_lang_js_ = ({\n  name: "salutation-select",\n  props: {\n    addressData: {\n      type: Object,\n      required: true\n    },\n    addressType: {\n      type: [Number, String],\n      default: 1\n    },\n    enabledAddressFields: {\n      type: Object,\n      default: function _default() {\n        return [];\n      }\n    },\n    defaultSalutation: {\n      type: String,\n      default: App.config.addresses.defaultSalutation\n    }\n  },\n  data: function data() {\n    return {\n      salutations: [{\n        key: "please select",\n        name: "addressSalutationPleaseSelect"\n      }, {\n        key: "male",\n        name: "addressSalutationMale"\n      }, {\n        key: "female",\n        name: "addressSalutationFemale"\n      }, {\n        key: "diverse",\n        name: "addressSalutationDiverse"\n      }, {\n        key: "company",\n        name: "addressSalutationCompany"\n      }]\n    };\n  },\n  computed: {\n    currentSalutation: function currentSalutation() {\n      var _this = this;\n      var countryId = parseInt(this.addressData.countryId) || 1;\n      var addressKey = parseInt(this.addressType) === 1 ? "billing_address" : "delivery_address";\n      var countryKey = countryId === 12 ? "gb" : "de";\n      var salutations = this.salutations.map(function (salutation) {\n        return {\n          key: salutation.key,\n          name: _this.$translate("Ceres::Template." + salutation.name)\n        };\n      });\n      if (this.enabledAddressFields[countryKey].includes("".concat(addressKey, ".name1")) || this.enabledAddressFields[countryKey].includes("".concat(addressKey, ".salutation"))) {\n        return salutations;\n      }\n      return salutations.filter(function (salutation) {\n        return salutation.key !== "company" && salutation.key !== "please select";\n      });\n    }\n  },\n  /**\n   * Get the shipping countries\n   */\n  created: function created() {\n    this.$options.template = this.template;\n    var selectedSalutation = this.defaultSalutation;\n    if ((0,utils/* isNullOrUndefined */.le)(selectedSalutation)) {\n      selectedSalutation = this.currentSalutation[0].key;\n    }\n    this.emitInputEvent(selectedSalutation);\n  },\n  methods: {\n    emitInputEvent: function emitInputEvent(value) {\n      var isNewGenderPersonal = this.getIsGenderPersonal(value);\n      var isOldGenderPersonal = this.getIsGenderPersonal(this.addressData.gender);\n      this.$emit("input", {\n        field: "gender",\n        value: value\n      });\n\n      // just reset the input fields, when switching the gender between a personal one and company\n      if (isNewGenderPersonal !== isOldGenderPersonal) {\n        this.$emit("input", {\n          field: "name1",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "name2",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "name3",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "vatNumber",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "contactPerson",\n          value: ""\n        });\n      }\n    },\n    checkGenderCompany: function checkGenderCompany(gender) {\n      if (gender === "company") {\n        return this.addressData.name1 !== null || this.addressData.name1 !== "";\n      }\n      return true;\n    },\n    getIsGenderPersonal: function getIsGenderPersonal(gender) {\n      return ["male", "female", "diverse"].includes(gender);\n    }\n  },\n  watch: {\n    currentSalutation: function currentSalutation(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        var selectedSalutation = this.addressData.gender;\n\n        // cleanse the current selected salutation, if it\'s not longer included in the choice\n        if (!newVal.map(function (salutation) {\n          return salutation.key;\n        }).includes(selectedSalutation)) {\n          this.emitInputEvent(newVal[0].key);\n        }\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_SalutationSelectvue_type_script_lang_js_ = (SalutationSelectvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(51900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/SalutationSelect.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  customer_SalutationSelectvue_type_script_lang_js_,\n  SalutationSelectvue_type_template_id_7efc2198_render,\n  SalutationSelectvue_type_template_id_7efc2198_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var SalutationSelect = (component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=template&id=267c911a&\n\nvar CountrySelectvue_type_template_id_267c911a_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "",\n      "data-model": "countryId"\n    }\n  }, [_c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      id: "country-id-select" + _vm._uid\n    },\n    domProps: {\n      value: _vm.selectedCountryId\n    },\n    on: {\n      change: function change($event) {\n        return _vm.countryChanged($event.target.value);\n      }\n    }\n  }, _vm._l(_vm.countryList, function (country) {\n    return _c("option", {\n      key: country.id,\n      domProps: {\n        value: country.id,\n        selected: country.id === _vm.selectedCountryId\n      }\n    }, [_vm._v("\\n                " + _vm._s(country.currLangName) + "\\n            ")]);\n  }), 0), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "country-id-select" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.headerCountry")))])]), _vm._v(" "), _vm.isInOptionalFields("stateId") ? [_vm.stateList && _vm.stateList.length > 0 ? _c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("stateId"),\n      expression: "isInRequiredFields(\'stateId\')"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "stateId"\n    }\n  }, [_c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      id: "state-id-select" + _vm._uid\n    },\n    domProps: {\n      value: _vm.selectedStateId\n    },\n    on: {\n      change: function change($event) {\n        return _vm.stateChanged($event.target.value);\n      }\n    }\n  }, [_c("option", {\n    domProps: {\n      selected: _vm.selectedStateId === null\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPleaseSelect")))]), _vm._v(" "), _vm._l(_vm.stateList, function (state) {\n    return _c("option", {\n      key: state.id,\n      domProps: {\n        value: state.id,\n        selected: state.id === _vm.selectedStateId\n      }\n    }, [_vm._v("\\n                    " + _vm._s(state.name) + "\\n                ")]);\n  })], 2), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "state-id-select" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.headerState", "stateId")))])]) : _vm._e()] : _vm._e()], 2);\n};\nvar CountrySelectvue_type_template_id_267c911a_staticRenderFns = [];\nCountrySelectvue_type_template_id_267c911a_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=template&id=267c911a&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js\nvar es_array_concat = __webpack_require__(92222);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.values.js\nvar es_object_values = __webpack_require__(26833);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.sort.js\nvar es_array_sort = __webpack_require__(2707);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js\nvar es_array_find = __webpack_require__(69826);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(91038);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(47042);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(74916);\n// EXTERNAL MODULE: ./resources/js/src/app/services/TranslationService.js\nvar TranslationService = __webpack_require__(16698);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var CountrySelectvue_type_script_lang_js_ = ({\n  name: "country-select",\n  props: {\n    selectedCountryId: Number,\n    selectedStateId: Number,\n    addressType: {\n      type: String,\n      required: true\n    },\n    optionalAddressFields: {\n      type: Object,\n      default: function _default() {}\n    },\n    requiredAddressFields: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      stateList: [],\n      selectedCountry: {}\n    };\n  },\n  computed: _objectSpread({\n    addressKeyPrefix: function addressKeyPrefix() {\n      return this.addressType === "1" ? "billing_address." : "delivery_address.";\n    },\n    optionalFields: function optionalFields() {\n      var iso = this.selectedCountry.isoCode2.toLowerCase();\n      if ((0,utils/* isNullOrUndefined */.le)(this.optionalAddressFields[iso])) {\n        return this.optionalAddressFields.de;\n      }\n      return this.optionalAddressFields[iso];\n    },\n    requiredFields: function requiredFields() {\n      var iso = this.selectedCountry.isoCode2.toLowerCase();\n      if ((0,utils/* isNullOrUndefined */.le)(this.requiredAddressFields[iso])) {\n        return this.requiredAddressFields.de;\n      }\n      return this.requiredAddressFields[iso];\n    },\n    countryList: function countryList() {\n      // if it\'s for a billing address we add every eu country to the list due to legal obligations\n      if (this.addressType === "1") {\n        var activeCountries = this.$store.state.localization.shippingCountries;\n        var euCountries = this.$store.state.localization.euShippingCountries;\n        var allCountries = [].concat(_toConsumableArray(activeCountries), _toConsumableArray(euCountries));\n        var combinedCountries = {};\n        allCountries.forEach(function (country) {\n          combinedCountries[country.id] = country;\n        });\n        combinedCountries = Object.values(combinedCountries);\n        combinedCountries = combinedCountries.sort(function (a, b) {\n          return a.currLangName.localeCompare(b.currLangName);\n        });\n        return combinedCountries;\n      }\n      return this.$store.state.localization.shippingCountries;\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    shippingCountryId: function shippingCountryId(state) {\n      return state.localization.shippingCountryId;\n    }\n  })),\n  /**\n   * Get the shipping countries\n   */\n  created: function created() {\n    this.updateSelectedCountry();\n  },\n  methods: {\n    /**\n     * Method to fire when the country has changed\n     */\n    countryChanged: function countryChanged(value) {\n      var _this$getCountryById;\n      this.$emit("country-changed", (_this$getCountryById = this.getCountryById(parseInt(value))) !== null && _this$getCountryById !== void 0 ? _this$getCountryById : this.countryList[0]);\n      this.$emit("state-changed", null);\n    },\n    /**\n     * @param {*} value\n     */\n    stateChanged: function stateChanged(value) {\n      this.$emit("state-changed", parseInt(value));\n    },\n    /**\n     * @param countryId\n     * @returns {*}\n     */\n    getCountryById: function getCountryById(countryId) {\n      return this.countryList.find(function (country) {\n        if (country.id === countryId) {\n          return country;\n        }\n        return null;\n      });\n    },\n    updateSelectedCountry: function updateSelectedCountry() {\n      var _this$getCountryById2;\n      var countryId = this.selectedCountryId || this.shippingCountryId;\n      this.selectedCountry = (_this$getCountryById2 = this.getCountryById(countryId)) !== null && _this$getCountryById2 !== void 0 ? _this$getCountryById2 : this.countryList[0];\n      if (this.selectedCountry) {\n        this.stateList = this.selectedCountry.states || [];\n      }\n      this.countryChanged(countryId);\n    },\n    isInOptionalFields: function isInOptionalFields(key) {\n      return this.optionalFields.includes(this.addressKeyPrefix + key);\n    },\n    isInRequiredFields: function isInRequiredFields(key) {\n      return this.requiredFields.includes(this.addressKeyPrefix + key);\n    },\n    transformTranslation: function transformTranslation(translationKey, addressKey) {\n      var translation = TranslationService/* default.translate */.Z.translate(translationKey);\n      var isRequired = this.isInRequiredFields(addressKey);\n      return translation + (isRequired ? "*" : "");\n    }\n  },\n  watch: {\n    selectedCountryId: function selectedCountryId() {\n      this.updateSelectedCountry();\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_CountrySelectvue_type_script_lang_js_ = (CountrySelectvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/CountrySelect.vue\n\n\n\n\n\n/* normalize component */\n;\nvar CountrySelect_component = (0,componentNormalizer/* default */.Z)(\n  customer_CountrySelectvue_type_script_lang_js_,\n  CountrySelectvue_type_template_id_267c911a_render,\n  CountrySelectvue_type_template_id_267c911a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var CountrySelect = (CountrySelect_component.exports);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js\nvar es_string_trim = __webpack_require__(73210);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/VatId.vue?vue&type=template&id=7888d220&\n\n\n\n\nvar VatIdvue_type_template_id_7888d220_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm.showInput ? _c("div", {\n    staticClass: "input-group flex-nowrap",\n    attrs: {\n      "data-model": "vatNumber"\n    }\n  }, [_vm.isEU ? _c("div", {\n    staticClass: "input-unit w-auto input-group-prepend"\n  }, [_vm.vatCodes.length === 1 ? _c("span", {\n    staticClass: "input-group-text h-100 border-0",\n    attrs: {\n      id: "basic-addon1"\n    }\n  }, [_vm._v(_vm._s(_vm.vatCodes[0]))]) : _vm._e(), _vm._v(" "), _vm.vatCodes.length > 1 ? _c("select", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.vatPrefix,\n      expression: "vatPrefix"\n    }],\n    staticClass: "custom-select",\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = "_value" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.vatPrefix = $event.target.multiple ? $$selectedVal : $$selectedVal[0];\n      }\n    }\n  }, _vm._l(_vm.vatCodes, function (vatCode, index) {\n    return _c("option", {\n      key: index,\n      domProps: {\n        value: vatCode\n      }\n    }, [_vm._v(_vm._s(vatCode))]);\n  }), 0) : _vm._e()]) : _vm._e(), _vm._v(" "), _c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isRequired,\n      expression: "isRequired",\n      arg: "text"\n    }],\n    staticClass: "input-unit flex-fill w-auto"\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model.trim",\n      value: _vm.vatNumber,\n      expression: "vatNumber",\n      modifiers: {\n        trim: true\n      }\n    }],\n    attrs: {\n      "aria-describedby": "basic-addon1",\n      type: "text",\n      name: "vatNumber",\n      id: "txtVatNumber" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "vat-id"\n    },\n    domProps: {\n      value: _vm.vatNumber\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.vatNumber = $event.target.value.trim();\n      },\n      blur: function blur($event) {\n        return _vm.$forceUpdate();\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtVatNumber" + _vm._uid\n    }\n  }, [_vm._v("\\n            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressVatNumber", "de", "billing_address.vatNumber")) + "\\n        ")])])]) : _vm._e();\n};\nvar VatIdvue_type_template_id_7888d220_staticRenderFns = [];\nVatIdvue_type_template_id_7888d220_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/VatId.vue?vue&type=template&id=7888d220&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js\nvar es_string_starts_with = __webpack_require__(23157);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/VatId.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n/* harmony default export */ var VatIdvue_type_script_lang_js_ = ({\n  name: "vat-id",\n  props: {\n    selectedCountryId: Number,\n    value: String,\n    isRequired: Boolean,\n    showInput: Boolean\n  },\n  data: function data() {\n    return {\n      vatNumber: "",\n      vatPrefix: "",\n      isPrefixValid: false\n    };\n  },\n  computed: {\n    vatCodes: function vatCodes() {\n      var _this$selectedCountry, _this$selectedCountry2, _this$selectedCountry3;\n      this.vatPrefix = (_this$selectedCountry = this.selectedCountry) !== null && _this$selectedCountry !== void 0 && _this$selectedCountry.vatCodes && (_this$selectedCountry2 = this.selectedCountry) !== null && _this$selectedCountry2 !== void 0 && _this$selectedCountry2.vatCodes[0] ? this.selectedCountry.vatCodes[0] : "";\n      return (_this$selectedCountry3 = this.selectedCountry) !== null && _this$selectedCountry3 !== void 0 && _this$selectedCountry3.vatCodes ? this.selectedCountry.vatCodes : [];\n    },\n    isEU: function isEU() {\n      var _this$vatCodes;\n      return ((_this$vatCodes = this.vatCodes) === null || _this$vatCodes === void 0 ? void 0 : _this$vatCodes.length) > 0;\n    },\n    selectedCountry: function selectedCountry() {\n      var _this = this;\n      return this.$store.state.localization.shippingCountries.find(function (country) {\n        return country.id === _this.selectedCountryId;\n      });\n    }\n  },\n  watch: {\n    value: function value(newValue) {\n      this.setValues(newValue);\n    },\n    showInput: function showInput() {\n      if (!this.showInput) {\n        this.deleteValue();\n      }\n    },\n    vatNumber: function vatNumber() {\n      this.emitChange();\n    },\n    vatPrefix: function vatPrefix() {\n      this.emitChange();\n    }\n  },\n  created: function created() {\n    this.setValues(this.value);\n  },\n  methods: {\n    transformTranslation: function transformTranslation(translationKey) {\n      var translation = this.$translate(translationKey);\n      return translation + (this.isRequired ? "*" : "");\n    },\n    deleteValue: function deleteValue() {\n      var _this$selectedCountry4, _this$selectedCountry5;\n      this.vatNumber = "";\n      this.vatPrefix = (_this$selectedCountry4 = this.selectedCountry) !== null && _this$selectedCountry4 !== void 0 && _this$selectedCountry4.vatCodes && (_this$selectedCountry5 = this.selectedCountry) !== null && _this$selectedCountry5 !== void 0 && _this$selectedCountry5.vatCodes[0] ? this.selectedCountry.vatCodes[0] : "";\n    },\n    emitChange: function emitChange() {\n      var value = !!this.vatNumber ? this.vatPrefix + this.vatNumber : "";\n      this.$emit(\'input\', value);\n    },\n    setValues: function setValues(value) {\n      var vatPrefix = this.getVatPrefix(value);\n      this.isPrefixValid = !!vatPrefix;\n      if (this.isPrefixValid) {\n        this.vatPrefix = vatPrefix;\n        this.vatNumber = value.slice(vatPrefix.length);\n      } else {\n        this.vatNumber = value;\n      }\n    },\n    /**\n     * @param value\n     * @returns {string} - Returns the best matching vat code\n     */\n    getVatPrefix: function getVatPrefix(value) {\n      var _this$vatCodes2;\n      var result = "";\n      (_this$vatCodes2 = this.vatCodes) === null || _this$vatCodes2 === void 0 ? void 0 : _this$vatCodes2.forEach(function (vatCode) {\n        if (value.startsWith(vatCode) && vatCode.length > result.length) {\n          result = vatCode;\n        }\n      });\n      return result;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/VatId.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_VatIdvue_type_script_lang_js_ = (VatIdvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/VatId.vue\n\n\n\n\n\n/* normalize component */\n;\nvar VatId_component = (0,componentNormalizer/* default */.Z)(\n  customer_VatIdvue_type_script_lang_js_,\n  VatIdvue_type_template_id_7888d220_render,\n  VatIdvue_type_template_id_7888d220_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var VatId = (VatId_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=script&lang=js&\nfunction AddressInputGroupvue_type_script_lang_js_typeof(obj) { "@babel/helpers - typeof"; return AddressInputGroupvue_type_script_lang_js_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AddressInputGroupvue_type_script_lang_js_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction AddressInputGroupvue_type_script_lang_js_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction AddressInputGroupvue_type_script_lang_js_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AddressInputGroupvue_type_script_lang_js_ownKeys(Object(source), !0).forEach(function (key) { AddressInputGroupvue_type_script_lang_js_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AddressInputGroupvue_type_script_lang_js_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction AddressInputGroupvue_type_script_lang_js_defineProperty(obj, key, value) { key = AddressInputGroupvue_type_script_lang_js_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction AddressInputGroupvue_type_script_lang_js_toPropertyKey(arg) { var key = AddressInputGroupvue_type_script_lang_js_toPrimitive(arg, "string"); return AddressInputGroupvue_type_script_lang_js_typeof(key) === "symbol" ? key : String(key); }\nfunction AddressInputGroupvue_type_script_lang_js_toPrimitive(input, hint) { if (AddressInputGroupvue_type_script_lang_js_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (AddressInputGroupvue_type_script_lang_js_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n/* harmony default export */ var AddressInputGroupvue_type_script_lang_js_ = ({\n  name: "address-input-group",\n  components: {\n    SalutationSelect: SalutationSelect,\n    CountrySelect: CountrySelect,\n    VatId: VatId\n  },\n  props: {\n    defaultCountry: {\n      type: String,\n      default: "DE"\n    },\n    addressType: String,\n    modalType: String,\n    template: String,\n    value: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    optionalAddressFields: {\n      type: Object,\n      default: function _default() {\n        return {\n          de: [],\n          uk: []\n        };\n      }\n    },\n    requiredAddressFields: {\n      type: Object,\n      default: function _default() {\n        return {\n          de: [],\n          uk: []\n        };\n      }\n    },\n    defaultSalutation: {\n      type: String,\n      default: App.config.addresses.defaultSalutation\n    }\n  },\n  computed: AddressInputGroupvue_type_script_lang_js_objectSpread({\n    isMyAccount: function isMyAccount() {\n      return App.templateType === "my-account";\n    },\n    isPickupStation: function isPickupStation() {\n      return this.value && this.value.address1 === "PACKSTATION" && this.isParcelBoxAvailable;\n    },\n    isPostOffice: function isPostOffice() {\n      return this.value && this.value.address1 === "POSTFILIALE" && this.isPostOfficeAvailable;\n    },\n    isParcelOrOfficeAvailable: function isParcelOrOfficeAvailable() {\n      return (this.isParcelBoxAvailable || this.isPostOfficeAvailable) && this.selectedCountry && this.selectedCountry.isoCode2 === "DE" && this.addressType === "2";\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    isParcelBoxAvailable: function isParcelBoxAvailable(state) {\n      return state.checkout.shipping.isParcelBoxAvailable;\n    },\n    isPostOfficeAvailable: function isPostOfficeAvailable(state) {\n      return state.checkout.shipping.isPostOfficeAvailable;\n    }\n  })),\n  data: function data() {\n    return {\n      stateList: [],\n      countryLocaleList: ["DE", "GB"],\n      localeToShow: this.defaultCountry,\n      selectedCountry: null\n    };\n  },\n  methods: {\n    /**\n     * Update the address input group to show.\n     * @param shippingCountry\n     */\n    onSelectedCountryChanged: function onSelectedCountryChanged(shippingCountry) {\n      this.selectedCountry = shippingCountry;\n      if (shippingCountry && this.countryLocaleList.indexOf(shippingCountry.isoCode2) >= 0) {\n        this.localeToShow = shippingCountry.isoCode2;\n      } else {\n        this.localeToShow = this.defaultCountry;\n      }\n      this.emitInputEvent("countryId", shippingCountry.id);\n      if (this.isPickupStation || this.isPostOffice) {\n        this.togglePickupStation(false);\n      }\n    },\n    togglePickupStation: function togglePickupStation(showPickupStation) {\n      var emitInputs = {\n        address1: "",\n        address2: "",\n        address3: "",\n        showPickupStation: showPickupStation\n      };\n      if (showPickupStation) {\n        emitInputs.address1 = this.isParcelBoxAvailable ? "PACKSTATION" : "POSTFILIALE";\n      }\n      for (var input in emitInputs) {\n        this.emitInputEvent(input, emitInputs[input]);\n      }\n    },\n    /**\n     * @param {string} field\n     * @param {number} value\n     */\n    emitInputEvent: function emitInputEvent(field, value) {\n      this.$emit("input", {\n        field: field,\n        value: value\n      });\n    },\n    isInOptionalFields: function isInOptionalFields(locale, key) {\n      return this.optionalAddressFields[locale].includes(key);\n    },\n    isInRequiredFields: function isInRequiredFields(locale, key) {\n      return this.requiredAddressFields && this.requiredAddressFields[locale] && this.requiredAddressFields[locale].includes(key);\n    },\n    transformTranslation: function transformTranslation(translationKey, locale, addressKey) {\n      var translation = this.$translate(translationKey);\n      var isRequired = this.isInRequiredFields(locale, addressKey);\n      return translation + (isRequired ? "*" : "");\n    },\n    areNameFieldsShown: function areNameFieldsShown(locale, keyPrefix) {\n      var isSalutationActive = this.isInOptionalFields(locale, "".concat(keyPrefix, ".salutation"));\n      var isContactPersonActive = this.isInOptionalFields(locale, "".concat(keyPrefix, ".contactPerson"));\n      var isName1Active = this.isInOptionalFields(locale, "".concat(keyPrefix, ".name1"));\n      var isSelectedSalutationCompany = this.value.gender === "company";\n      var condition1 = isSalutationActive && isContactPersonActive && isSelectedSalutationCompany;\n      var condition2 = !isSalutationActive && isName1Active && isContactPersonActive;\n      return !(condition1 || condition2);\n    },\n    areNameFieldsRequired: function areNameFieldsRequired(locale, keyPrefix) {\n      var isSalutationActive = this.isInOptionalFields(locale, "".concat(keyPrefix, ".salutation"));\n      var isName1Active = this.isInOptionalFields(locale, "".concat(keyPrefix, ".name1"));\n      var isContactPersonRequired = this.isInRequiredFields(locale, "".concat(keyPrefix, ".contactPerson"));\n      var isSelectedSalutationCompany = this.value.gender === "company";\n      var condition1 = isSalutationActive && !isSelectedSalutationCompany;\n      var condition2 = isSalutationActive && isSelectedSalutationCompany && isContactPersonRequired;\n      var condition3 = !isSalutationActive && isName1Active && isContactPersonRequired;\n      var condition4 = !isSalutationActive && !isName1Active;\n      return condition1 || condition2 || condition3 || condition4;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_AddressInputGroupvue_type_script_lang_js_ = (AddressInputGroupvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue\n\n\n\n\n\n/* normalize component */\n;\nvar AddressInputGroup_component = (0,componentNormalizer/* default */.Z)(\n  customer_AddressInputGroupvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var AddressInputGroup = (AddressInputGroup_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///72683\n')},62797:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ Registration; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/Registration.vue?vue&type=template&id=b160485e&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("form", {\n    ref: "registrationForm",\n    staticClass: "w-100",\n    attrs: {\n      autocomplete: "on",\n      method: "post"\n    },\n    on: {\n      submit: function submit($event) {\n        $event.preventDefault();\n        return _vm.validateRegistration();\n      }\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-sm-12"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "mail"\n    }\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.username,\n      expression: "username"\n    }],\n    attrs: {\n      "data-testing": "mail-register",\n      type: "email",\n      name: "email",\n      autocomplete: "email",\n      id: "email" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.username\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.username = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regEmail")) + "*")])])]), _vm._v(" "), !_vm.guestMode ? _c("div", {\n    staticClass: "col-sm-6"\n  }, [_c("div", {\n    ref: "passwordInput",\n    staticClass: "input-unit",\n    class: {\n      "no-bottom media-xs-d": _vm.modalElement\n    },\n    attrs: {\n      "data-validate": "password"\n    }\n  }, [_c("popper", {\n    ref: "passwordHint",\n    attrs: {\n      trigger: "focus",\n      placement: "bottom"\n    },\n    scopedSlots: _vm._u([{\n      key: "handle",\n      fn: function fn() {\n        return [_c("input", {\n          directives: [{\n            name: "model",\n            rawName: "v-model",\n            value: _vm.password,\n            expression: "password"\n          }],\n          attrs: {\n            "data-testing": "password-register",\n            type: "password",\n            name: "password",\n            autocomplete: "new-password",\n            id: "new-password-" + _vm._uid\n          },\n          domProps: {\n            value: _vm.password\n          },\n          on: {\n            input: function input($event) {\n              if ($event.target.composing) return;\n              _vm.password = $event.target.value;\n            }\n          }\n        })];\n      },\n      proxy: true\n    }, {\n      key: "title",\n      fn: function fn() {\n        return [_c("div", [_vm._v("\\n                            " + _vm._s(_vm.$translate("Ceres::Template.regPasswordHintTitle")) + "\\n                        ")])];\n      },\n      proxy: true\n    }, {\n      key: "content",\n      fn: function fn() {\n        return [_c("ul", {\n          staticClass: "pl-3"\n        }, [_c("li", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPasswordHintLength")))]), _vm._v(" "), _c("li", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPasswordHintDigit")))]), _vm._v(" "), _c("li", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPasswordHintChar")))])])];\n      },\n      proxy: true\n    }], null, false, 303377206)\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "new-password-" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPassword")) + "*")])], 1)]) : _vm._e(), _vm._v(" "), !_vm.guestMode ? _c("div", {\n    staticClass: "col-sm-6 input-unit-group"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    class: {\n      "no-bottom": _vm.modalElement\n    },\n    attrs: {\n      "data-validate": "ref"\n    }\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.passwordRepeat,\n      expression: "passwordRepeat"\n    }],\n    attrs: {\n      type: "password",\n      name: "password-repeat",\n      autocomplete: "new-password",\n      id: "new-password-repeat-" + _vm._uid,\n      "data-validate-ref": "#new-password-" + _vm._uid,\n      "data-testing": "repeat-password-register"\n    },\n    domProps: {\n      value: _vm.passwordRepeat\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.passwordRepeat = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "new-password-repeat-" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regRepeatPassword")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.honeypot,\n      expression: "honeypot"\n    }],\n    staticClass: "honey",\n    attrs: {\n      type: "text",\n      name: "username",\n      autocomplete: "new-password",\n      tabindex: "-1"\n    },\n    domProps: {\n      value: _vm.honeypot\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.honeypot = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [!_vm.isSimpleRegistration ? _c("address-input-group", {\n    attrs: {\n      template: "#vue-address-input-group",\n      "address-type": "1",\n      value: _vm.billingAddress,\n      "optional-address-fields": _vm.shownFields,\n      "required-address-fields": _vm.requiredFields,\n      "default-salutation": _vm.defaultSalutation\n    },\n    on: {\n      input: function input($event) {\n        return _vm.setAddressDataField($event);\n      }\n    },\n    scopedSlots: _vm._u([{\n      key: "custom-address-fields",\n      fn: function fn() {\n        return [_vm._t("custom-address-fields")];\n      },\n      proxy: true\n    }], null, true)\n  }) : _vm._e()], 1), _vm._v(" "), _vm.enableConfirmingPrivacyPolicy ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("accept-privacy-policy-check", {\n    staticClass: "mt-3 mb-0",\n    attrs: {\n      "show-error": _vm.privacyPolicyShowError\n    },\n    on: {\n      input: function input($event) {\n        return _vm.privacyPolicyValueChanged($event);\n      }\n    },\n    model: {\n      value: _vm.privacyPolicyAccepted,\n      callback: function callback($$v) {\n        _vm.privacyPolicyAccepted = $$v;\n      },\n      expression: "privacyPolicyAccepted"\n    }\n  })], 1) : _vm._e()]), _vm._v(" "), _c("div", {\n    staticClass: "border-top mt-2 text-right"\n  }, [_vm._t("extend-overlay-buttons"), _vm._v(" "), _c("button", {\n    staticClass: "btn btn-appearance btn-primary btn-medium mt-3",\n    class: _vm.buttonSizeClass,\n    attrs: {\n      disabled: _vm.isDisabled,\n      "data-testing": "register-submit"\n    }\n  }, [_vm._v("\\n            " + _vm._s(_vm.$translate("Ceres::Template.regRegister")) + "\\n            "), _c("icon", {\n    staticClass: "default-float",\n    attrs: {\n      icon: "user-plus",\n      loading: _vm.isDisabled\n    }\n  })], 1)], 2), _vm._v(" "), !!_vm.googleRecaptchaApiKey && (_vm.modalShown || !_vm.isSimpleRegistration) ? _c("recaptcha") : _vm._e()], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/Registration.vue?vue&type=template&id=b160485e&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js\nvar es_array_index_of = __webpack_require__(82772);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.join.js\nvar es_array_join = __webpack_require__(69600);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js\nvar es_string_trim = __webpack_require__(73210);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(47042);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.assign.js\nvar es_object_assign = __webpack_require__(19601);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(41539);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js\nvar es_function_name = __webpack_require__(68309);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(91038);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(78783);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(74916);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(82526);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(41817);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(32165);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(66992);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(33948);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ValidationService.js\nvar ValidationService = __webpack_require__(10892);\n// EXTERNAL MODULE: ./resources/js/src/app/services/UrlService.js + 1 modules\nvar UrlService = __webpack_require__(86160);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/executeReCaptcha.js\nvar executeReCaptcha = __webpack_require__(56264);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(29413);\n// EXTERNAL MODULE: ./resources/js/src/app/mixins/buttonSizeProperty.mixin.js\nvar buttonSizeProperty_mixin = __webpack_require__(25314);\n// EXTERNAL MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue + 19 modules\nvar AddressInputGroup = __webpack_require__(72683);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ApiService.js\nvar ApiService = __webpack_require__(57653);\n// EXTERNAL MODULE: ./resources/js/src/app/services/NotificationService.js\nvar NotificationService = __webpack_require__(41841);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ModalService.js\nvar ModalService = __webpack_require__(73740);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=template&id=14195a90&\nvar AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "form-check",\n    class: {\n      error: _vm.showError\n    }\n  }, [_c("input", {\n    staticClass: "form-check-input",\n    attrs: {\n      type: "checkbox",\n      id: "privacy-policy-accept" + _vm._uid,\n      "data-testing": "privacy-policy-accept-register"\n    },\n    domProps: {\n      checked: _vm.value\n    },\n    on: {\n      change: function change($event) {\n        return _vm.onValueChanged($event.target.checked);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    staticClass: "form-check-label",\n    attrs: {\n      for: "privacy-policy-accept" + _vm._uid\n    }\n  }, [_c("span", {\n    domProps: {\n      innerHTML: _vm._s(_vm.labelHtml)\n    }\n  }), _c("sup", [_vm._v("*")])])]);\n};\nvar AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_staticRenderFns = [];\nAcceptPrivacyPolicyCheckvue_type_template_id_14195a90_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=template&id=14195a90&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js\nvar es_array_concat = __webpack_require__(92222);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var AcceptPrivacyPolicyCheckvue_type_script_lang_js_ = ({\n  name: "accept-privacy-policy-check",\n  props: {\n    value: Boolean,\n    showError: Boolean\n  },\n  computed: {\n    labelHtml: function labelHtml() {\n      var contactPrivacyPolicy = this.$translate("Ceres::Template.contactPrivacyPolicy", {\n        "hyphen": "&shy;"\n      });\n      var html = "\\n                \x3c!----\x3e<a href=\\"".concat(App.urls.privacyPolicy, "\\" target=\\"_blank\\" class=\\"text-appearance\\">\\n                    <span>").concat(contactPrivacyPolicy, "</span>\\n                </a>\x3c!----\x3e\\n            ");\n      return this.$translate("Ceres::Template.contactAcceptPrivacyPolicy", {\n        policy: html\n      });\n    }\n  },\n  methods: {\n    onValueChanged: function onValueChanged(value) {\n      this.$emit("input", value);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_AcceptPrivacyPolicyCheckvue_type_script_lang_js_ = (AcceptPrivacyPolicyCheckvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(51900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  customer_AcceptPrivacyPolicyCheckvue_type_script_lang_js_,\n  AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_render,\n  AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var AcceptPrivacyPolicyCheck = (component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/Registration.vue?vue&type=script&lang=js&\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var Registrationvue_type_script_lang_js_ = ({\n  name: "registration",\n  components: {\n    AddressInputGroup: AddressInputGroup/* default */.Z,\n    AcceptPrivacyPolicyCheck: AcceptPrivacyPolicyCheck\n  },\n  mixins: [buttonSizeProperty_mixin/* ButtonSizePropertyMixin */.Z],\n  props: {\n    modalElement: String,\n    guestMode: {\n      type: Boolean,\n      default: false\n    },\n    isSimpleRegistration: {\n      type: Boolean,\n      default: false\n    },\n    template: String,\n    backlink: String,\n    shownFields: Object,\n    requiredFields: Object,\n    defaultSalutation: {\n      type: String,\n      default: App.config.addresses.defaultSalutation\n    }\n  },\n  data: function data() {\n    return {\n      password: "",\n      passwordRepeat: "",\n      username: "",\n      billingAddress: {\n        countryId: null,\n        stateId: null,\n        gender: this.defaultSalutation\n      },\n      isDisabled: false,\n      privacyPolicyAccepted: false,\n      privacyPolicyShowError: false,\n      enableConfirmingPrivacyPolicy: App.config.global.registrationRequirePrivacyPolicyConfirmation,\n      googleRecaptchaApiKey: App.config.global.googleRecaptchaApiKey,\n      modalShown: false,\n      honeypot: ""\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      if (_this.modalElement) {\n        _this.initModalEventListeners();\n      }\n    });\n  },\n  methods: {\n    /**\n     * Validate the registration form\n     */\n    validateRegistration: function validateRegistration() {\n      var _this2 = this;\n      (0,executeReCaptcha/* executeReCaptcha */.j)(this.$refs.registrationForm).then(function (recaptchaToken) {\n        ValidationService["default"].validate(_this2.$refs.registrationForm).done(function () {\n          if (!_this2.enableConfirmingPrivacyPolicy || _this2.privacyPolicyAccepted) {\n            _this2.sendRegistration(recaptchaToken);\n          } else {\n            _this2.privacyPolicyShowError = true;\n            NotificationService["default"].error(_this2.$translate("Ceres::Template.contactAcceptFormPrivacyPolicy", {\n              hyphen: "&shy;"\n            }));\n            _this2.resetRecaptcha();\n          }\n        }).fail(function (invalidFields) {\n          _this2.resetRecaptcha();\n          if (!(0,utils/* isNullOrUndefined */.le)(_this2.$refs.passwordHint) && invalidFields.indexOf(_this2.$refs.passwordInput) >= 0) {\n            _this2.$refs.passwordHint.showPopper();\n          }\n          var invalidFieldNames = _this2.getInvalidFieldNames(invalidFields);\n          if (invalidFieldNames.length > 0) {\n            NotificationService["default"].error(_this2.$translate("Ceres::Template.checkoutCheckAddressFormFields", {\n              fields: invalidFieldNames.join(", ")\n            }));\n          }\n          ValidationService["default"].markInvalidFields(invalidFields, "error");\n          if (_this2.enableConfirmingPrivacyPolicy && !_this2.privacyPolicyAccepted) {\n            _this2.privacyPolicyShowError = true;\n            NotificationService["default"].error(_this2.$translate("Ceres::Template.contactAcceptFormPrivacyPolicy", {\n              hyphen: "&shy;"\n            }));\n          }\n        });\n      });\n    },\n    getInvalidFieldNames: function getInvalidFieldNames() {\n      var invalidFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var fieldNames = [];\n      var _iterator = _createForOfIteratorHelper(invalidFields),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n          var fieldName = field.lastElementChild.innerHTML.trim();\n          fieldName = fieldName.slice(-1) === "*" ? fieldName.slice(0, fieldName.length - 1) : fieldName;\n          fieldNames.push(fieldName);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return fieldNames;\n    },\n    /**\n     * Send the registration\n     */\n    sendRegistration: function sendRegistration(recaptchaToken) {\n      var _this3 = this;\n      var userObject = this.getUserObject();\n      userObject.recaptcha = recaptchaToken;\n      this.isDisabled = true;\n      ApiService["default"].post("/rest/io/customer", userObject).done(function (response) {\n        ApiService["default"].setToken(response);\n        if (!response.code) {\n          document.dispatchEvent(new CustomEvent("onSignUpSuccess", {\n            detail: userObject\n          }));\n          NotificationService["default"].success(_this3.$translate("Ceres::Template.regSuccessful")).closeAfter(3000);\n          if (document.getElementById(_this3.modalElement) !== null) {\n            ModalService["default"].findModal(document.getElementById(_this3.modalElement)).hide();\n          }\n          if (_this3.backlink !== null && _this3.backlink) {\n            (0,UrlService/* navigateTo */.T8)(decodeURIComponent(_this3.backlink));\n          } else {\n            location.reload();\n          }\n        } else {\n          NotificationService["default"].error(_this3.$translate("Ceres::Template.regError")).closeAfter(10000);\n          _this3.resetRecaptcha();\n        }\n        _this3.isDisabled = false;\n      }).fail(function (error) {\n        NotificationService["default"].error(error.error).closeAfter(10000);\n        _this3.resetRecaptcha();\n        _this3.isDisabled = false;\n      });\n    },\n    /** \n     * Resets recaptcha v2 to make it capable of executing again.\n    */\n    resetRecaptcha: function resetRecaptcha() {\n      if (App.config.global.googleRecaptchaVersion === 2 && window.grecaptcha) {\n        var recaptchaId = this.$refs.registrationForm.querySelector("[data-recaptcha]");\n        window.grecaptcha.reset(recaptchaId);\n      }\n    },\n    setAddressDataField: function setAddressDataField(_ref) {\n      var field = _ref.field,\n        value = _ref.value;\n      this.billingAddress[field] = value;\n      this.billingAddress = Object.assign({}, this.billingAddress);\n    },\n    /**\n     * Handle the user object which is send to the server\n     * @returns {{contact: {referrerId: number, typeId: number, options: {typeId: {typeId: number, subTypeId: number, value: *, priority: number}}}, honeypot: string}|{contact: {referrerId: number, typeId: number, password: *, options: {typeId: {typeId: number, subTypeId: number, value: *, priority: number}}}, honeypot: string}}\n     */\n    getUserObject: function getUserObject() {\n      var userObject = {\n        contact: {\n          referrerId: 1,\n          typeId: 1,\n          options: {\n            typeId: {\n              typeId: 2,\n              subTypeId: 4,\n              value: this.username,\n              priority: 0\n            }\n          }\n        },\n        honeypot: this.honeypot\n      };\n      if (!this.guestMode) {\n        userObject.contact.password = this.password;\n      }\n      if (!this.isSimpleRegistration) {\n        userObject.billingAddress = this.billingAddress;\n      }\n      return userObject;\n    },\n    privacyPolicyValueChanged: function privacyPolicyValueChanged(value) {\n      this.privacyPolicyAccepted = value;\n      if (value) {\n        this.privacyPolicyShowError = false;\n      }\n    },\n    initModalEventListeners: function initModalEventListeners() {\n      var _this4 = this;\n      var modal = ModalService["default"].findModal(document.getElementById(this.modalElement));\n      if ((0,utils/* isDefined */.$K)(modal)) {\n        modal.on("show.bs.modal", function () {\n          _this4.modalShown = true;\n        });\n        modal.on("hide.bs.modal", function () {\n          _this4.modalShown = false;\n        });\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/Registration.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_Registrationvue_type_script_lang_js_ = (Registrationvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/Registration.vue\n\n\n\n\n\n/* normalize component */\n;\nvar Registration_component = (0,componentNormalizer/* default */.Z)(\n  customer_Registrationvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var Registration = (Registration_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///62797\n')}}]);