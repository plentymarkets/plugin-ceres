{"version":3,"sources":["webpack:///resources/js/src/app/components/item/VariationSelect.vue","webpack:///./node_modules/core-js/internals/object-to-array.js","webpack:///./node_modules/core-js/modules/es.object.values.js","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?ea6c","webpack:///./resources/js/src/app/components/item/VariationSelect.vue","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?7032","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?65d9"],"names":[],"mappings":"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FA;AAFA,WADA;AAQA,SAVA;AAWA;AACA,KA9WA;AAgXA,aAhXA,qBAgXA,OAhXA,EAiXA;AACA,yCACA;AACA;AACA;;AAEA;AACA,KAxXA;AA0XA,iCA1XA,yCA0XA,SA1XA,EA2XA;AACA;AACA;AAAA;AAAA;;AAEA,kCACA;AACA;AACA,OAHA,MAIA,yEACA;AACA;AACA;;AACA;AACA;AAxYA,GA7FA;AAweA,SACA;AACA,oBADA,4BACA,KADA,EAEA;AACA;AACA;AAJA;AAzeA,G;;;;;;;;;;;AC5FA,kBAAkB,mBAAO,CAAC,iFAA0B;AACpD,iBAAiB,mBAAO,CAAC,iFAA0B;AACnD,sBAAsB,mBAAO,CAAC,6FAAgC;AAC9D,2BAA2B,mBAAO,CAAC,qHAA4C;;AAE/E,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,cAAc,mBAAO,CAAC,yFAA8B;;AAEpD;AACA;AACA,GAAG,+BAA+B;AAClC;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,8CAA8C,YAAY,YAAY,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4BAA4B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,yCAAyC;AACpE,6BAA6B,4BAA4B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnXA;AAAA;AAAA;AAAA;AAA8F;AAC3B;AACL;;;AAG9D;AACsG;AACtG,gBAAgB,2GAAU;AAC1B,EAAE,qFAAM;AACR,EAAE,0FAAM;AACR,EAAE,mGAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gF;;;;;;;;;;;;ACtCf;AAAA;AAAA,wCAAuM,CAAgB,mPAAG,EAAC,C;;;;;;;;;;;;ACA3N;AAAA;AAAA;AAAA;AAAA;AAAA","file":"chunks/ceres-10.js","sourcesContent":["<template>\n    <div>\n        <div v-if=\"attributes.length || (Object.keys(possibleUnits).length > 1 && isContentVisible)\" class=\"row\">\n            <div class=\"col-12 variation-select\" v-for=\"attribute in attributes\">\n                <!-- dropdown -->\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\n                    <select class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\">\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\n                        <option\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\n                        <option\n                                v-for=\"value in attribute.values\"\n                                :value=\"value.attributeValueId\"\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\">\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId)\">\n                                {{ value.name }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\">{{ attribute.name }}</label>\n                </div>\n                <!-- /dropdown -->\n\n                <!-- box and image -->\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n                    <span class=\"text-muted\">{{ attribute.name }}:</span> <b>{{ getSelectedAttributeValueName(attribute) }}</b>\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n                        <div class=\"v-s-box bg-white empty-option\"\n                             v-if=\"addPleaseSelectOption\"\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n                        </div>\n                        <div class=\"v-s-box bg-white empty-option\"\n                             v-if=\"hasEmptyOption\"\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n                        </div>\n\n                        <div class=\"v-s-box bg-white\"\n                             v-for=\"value in attribute.values\"\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId) }\"\n                             v-tooltip=\"!isAttributeSelectionValid(attribute.attributeId, value.attributeValueId)\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getInvalidOptionTooltip(attribute.attributeId, value.attributeValueId)\">\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n                        </div>\n                    </div>\n                </div>\n                <!-- /box and image -->\n            </div>\n\n            <!-- units -->\n            <div class=\"col-12 variation-select\" v-if=\"Object.keys(possibleUnits).length > 1 && isContentVisible\">\n                <div class=\"input-unit\">\n                    <select class=\"custom-select\" @change=\"selectUnit($event.target.value)\">\n                        <option\n                                v-for=\"(unit, unitId) in possibleUnits\"\n                                :value=\"unitId\"\n                                :selected=\"parseInt(unitId) === selectedUnit\">\n                            <template v-if=\"isUnitSelectionValid(unitId)\">\n                                {{ unit }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": unit }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label>{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\n                </div>\n            </div>\n            <!-- /units -->\n        </div>\n\n        <div v-else>\n            <slot></slot>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { textWidth } from \"../../helper/dom\";\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\nimport { mapState } from \"vuex\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n    props: {\n        forceContent:\n        {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    data()\n    {\n        return {\n            filteredVariationsCache: {},\n            lastContentCount: 0\n        };\n    },\n\n    mounted()\n    {\n        // initially check for valid selection and disable add to basket button\n        this.$store.commit(\"setIsVariationSelected\", !!this.currentSelection);\n    },\n\n    computed:\n    {\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption()\n        {\n            return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption()\n        {\n            return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection()\n        {\n            const filteredVariations = this.filterVariations(null, null, true);\n\n            if (filteredVariations.length === 1)\n            {\n                return filteredVariations[0];\n            }\n\n            return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits()\n        {\n            const possibleUnits = {};\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n            for (const variation of variations)\n            {\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\n            }\n\n            return possibleUnits;\n        },\n\n        isContentVisible()\n        {\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection()\n        {\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        ...mapState({\n            attributes: state => state.variationSelect.attributes,\n            currentVariation: state => state.item.variation.documents[0].data,\n            selectedAttributes: state => state.variationSelect.selectedAttributes,\n            selectedUnit: state => state.variationSelect.selectedUnit,\n            units: state => state.variationSelect.units,\n            variations: state => state.variationSelect.variations\n        })\n    },\n\n    methods:\n    {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\n            {\n                this.$store.commit(\"selectItemAttribute\", { attributeId, attributeValueId });\n                this.onSelectionChange(attributeId, attributeValueId, null);\n            }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId)\n        {\n            unitId = parseInt(unitId);\n            this.$store.commit(\"selectItemUnit\", unitId);\n            this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId)\n        {\n            if (this.currentSelection)\n            {\n                this.setVariation(this.currentSelection.variationId);\n            }\n            else if (!this.hasSelection)\n            {\n                // user switched back to \"please select\"\n                this.setVariation(0);\n            }\n            else\n            {\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n            }\n\n            this.lastContentCount = Object.keys(this.possibleUnits).length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n            const closestVariation    = this.getClosestVariation(qualifiedVariations);\n\n            if (!closestVariation)\n            {\n                return;\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n            this.correctSelection(invalidSelection);\n        },\n\n        /**\n         * returns a string for box tooltips, for not availble options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n            const closestVariation    = this.getClosestVariation(qualifiedVariations);\n\n            if (!closestVariation)\n            {\n                return \"\";\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n            const names = [];\n\n            for (const attribute of invalidSelection.attributesToReset)\n            {\n                if (attribute.attributeId !== attributeId)\n                {\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\n                }\n            }\n            if (invalidSelection.newUnit)\n            {\n                names.push(\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n                );\n            }\n\n            if (!names.length)\n            {\n                return null;\n            }\n\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\n        {\n            if (isDefined(attributeValueId))\n            {\n                return this.variations.filter(variation =>\n                {\n                    return isDefined(variation.attributes.find(attribute =>\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n                });\n            }\n            else if (isDefined(unitId))\n            {\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\n            }\n\n            return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * returns a variation, where a minimum of changes in the selection is required to archive\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariation(qualifiedVariations)\n        {\n            let closestVariation;\n            let numberOfRequiredChanges;\n\n            for (const variation of qualifiedVariations)\n            {\n                let changes = 0;\n\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\n                {\n                    changes++;\n                }\n\n                for (const attribute of variation.attributes)\n                {\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\n                    {\n                        changes++;\n                    }\n                }\n\n                if (!numberOfRequiredChanges || changes < numberOfRequiredChanges)\n                {\n                    closestVariation = variation;\n                    numberOfRequiredChanges = changes;\n                }\n            }\n\n            return closestVariation;\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation)\n        {\n            const attributesToReset = [];\n            let newUnit = null;\n\n            for (let selectedAttributeId in this.selectedAttributes)\n            {\n                selectedAttributeId = parseInt(selectedAttributeId);\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\n                {\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\n                    {\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                        attributesToReset.push(attributeToReset);\n                    }\n                }\n            }\n\n            if (variation.unitCombinationId !== this.selectedUnit)\n            {\n                newUnit = variation.unitCombinationId;\n            }\n\n            return { attributesToReset, newUnit };\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection)\n        {\n            const messages   = [];\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            for (const attributeToReset of invalidSelection.attributesToReset)\n            {\n                messages.push(\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\n                );\n\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n            }\n\n            if (invalidSelection.newUnit)\n            {\n                if (this.lastContentCount > 1 && Object.keys(this.possibleUnits).length > 1 && !isNull(this.selectedUnit))\n                {\n                    messages.push(\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\n                                this.$translate(\"Ceres::Template.singleItemContent\")\n                        })\n                    );\n                }\n\n                this.$store.commit(\"selectItemUnit\", invalidSelection.newUnit);\n            }\n\n            this.$store.commit(\"setItemSelectedAttributes\", attributes);\n\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n            NotificationService.warn(\n                messages.join(\"<br>\")\n            ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit)\n        {\n            attributes = attributes || this.selectedAttributes;\n            unitId = unitId || this.selectedUnit;\n            strict = !!strict;\n            ignoreUnit = !!ignoreUnit;\n\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n            if (isDefined(this.filteredVariationsCache[key]))\n            {\n                return this.filteredVariationsCache[key];\n            }\n\n            const uniqueValues = [...new Set(Object.values(attributes))];\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n            const filteredVariations = this.variations.filter(variation =>\n            {\n                // the selected unit is not matching\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\n                {\n                    return false;\n                }\n\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n                // requires more than 0 attributes\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                    && this.attributes.length > 0)\n                {\n                    return false;\n                }\n\n                for (const attributeId in attributes)\n                {\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\n                        variationAttribute.attributeId === parseInt(attributeId));\n\n                    // an attribute is not matching with selection\n                    if (variationAttribute &&\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            this.filteredVariationsCache[key] = filteredVariations;\n\n            return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n            if (this.selectedAttributes[attributeId] === attributeValueId)\n            {\n                return true;\n            }\n\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n\n            return !!this.filterVariations(selectedAttributes, null, null, ignoreUnit).length;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId)\n        {\n            unitId = parseInt(unitId);\n            if (this.selectedUnit === unitId)\n            {\n                return true;\n            }\n\n            return !!this.filterVariations(null, unitId).length;\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId)\n        {\n            if (!isDefined(variationId) && this.currentSelection)\n            {\n                variationId = this.currentSelection.variationId;\n            }\n\n            if (isDefined(variationId))\n            {\n                this.$store.dispatch(\"loadVariation\", variationId).then(variation =>\n                {\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                        {\n                            detail:\n                                {\n                                    attributes: variation.attributes,\n                                    documents: variation.documents\n                                }\n                        }));\n                });\n            }\n        },\n\n        isTextCut(content)\n        {\n            if (this.$refs.attributesContaner)\n            {\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n            }\n\n            return false;\n        },\n\n        getSelectedAttributeValueName(attribute)\n        {\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n            if (selectedAttributeValue)\n            {\n                return selectedAttributeValue.name;\n            }\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\n            {\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n            }\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        }\n    },\n\n    watch:\n    {\n        currentSelection(value)\n        {\n            this.$store.commit(\"setIsVariationSelected\", !!value);\n        }\n    }\n}\n</script>\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.github.io/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.github.io/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.github.io/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _vm.attributes.length ||\n    (Object.keys(_vm.possibleUnits).length > 1 && _vm.isContentVisible)\n      ? _c(\n          \"div\",\n          { staticClass: \"row\" },\n          [\n            _vm._l(_vm.attributes, function(attribute) {\n              return _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                attribute.type === \"dropdown\"\n                  ? _c(\n                      \"div\",\n                      {\n                        ref: \"attributesContaner\",\n                        refInFor: true,\n                        staticClass: \"input-unit\"\n                      },\n                      [\n                        _c(\n                          \"select\",\n                          {\n                            staticClass: \"custom-select\",\n                            on: {\n                              change: function($event) {\n                                return _vm.selectAttribute(\n                                  attribute.attributeId,\n                                  $event.target.value\n                                )\n                              }\n                            }\n                          },\n                          [\n                            _vm.addPleaseSelectOption || !_vm.hasSelection\n                              ? _c(\"option\", { domProps: { value: -1 } }, [\n                                  _vm._v(\n                                    _vm._s(\n                                      _vm.$translate(\n                                        \"Ceres::Template.singleItemPleaseSelect\"\n                                      )\n                                    )\n                                  )\n                                ])\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption ||\n                            _vm.selectedAttributes[attribute.attributeId] ===\n                              null\n                              ? _c(\n                                  \"option\",\n                                  {\n                                    domProps: {\n                                      value: null,\n                                      selected:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemNoSelection\"\n                                        )\n                                      )\n                                    )\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function(value) {\n                              return _c(\n                                \"option\",\n                                {\n                                  domProps: {\n                                    value: value.attributeValueId,\n                                    selected:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ]\n                                  }\n                                },\n                                [\n                                  _vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId\n                                  )\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                            \" +\n                                            _vm._s(value.name) +\n                                            \"\\n                        \"\n                                        )\n                                      ]\n                                    : [\n                                        _vm._v(\n                                          \"\\n                            \" +\n                                            _vm._s(\n                                              _vm.$translate(\n                                                \"Ceres::Template.singleItemInvalidAttribute\",\n                                                { name: value.name }\n                                              )\n                                            ) +\n                                            \"\\n                        \"\n                                        )\n                                      ]\n                                ],\n                                2\n                              )\n                            })\n                          ],\n                          2\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"label\",\n                          {\n                            directives: [\n                              {\n                                name: \"tooltip\",\n                                rawName: \"v-tooltip\",\n                                value: _vm.isTextCut(attribute.name),\n                                expression: \"isTextCut(attribute.name)\"\n                              }\n                            ],\n                            attrs: {\n                              \"data-toggle\": \"tooltip\",\n                              \"data-placement\": \"top\",\n                              title: attribute.name\n                            }\n                          },\n                          [_vm._v(_vm._s(attribute.name))]\n                        )\n                      ]\n                    )\n                  : attribute.type === \"box\" || attribute.type === \"image\"\n                  ? _c(\"div\", [\n                      _c(\"span\", { staticClass: \"text-muted\" }, [\n                        _vm._v(_vm._s(attribute.name) + \":\")\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"b\", [\n                        _vm._v(\n                          _vm._s(_vm.getSelectedAttributeValueName(attribute))\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        {\n                          staticClass: \"v-s-boxes py-3\",\n                          class: { images: attribute.type === \"image\" }\n                        },\n                        [\n                          _vm.addPleaseSelectOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === -1,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      -1\n                                    )\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        -1\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.hasEmptyOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === null,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      null\n                                    )\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        null\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemNoSelection\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm._l(attribute.values, function(value) {\n                            return _c(\n                              \"div\",\n                              {\n                                directives: [\n                                  {\n                                    name: \"tooltip\",\n                                    rawName: \"v-tooltip\",\n                                    value: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId\n                                    ),\n                                    expression:\n                                      \"!isAttributeSelectionValid(attribute.attributeId, value.attributeValueId)\"\n                                  }\n                                ],\n                                staticClass: \"v-s-box bg-white\",\n                                class: {\n                                  active:\n                                    value.attributeValueId ===\n                                    _vm.selectedAttributes[\n                                      attribute.attributeId\n                                    ],\n                                  invalid: !_vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId\n                                  )\n                                },\n                                attrs: {\n                                  \"data-html\": \"true\",\n                                  \"data-toggle\": \"tooltip\",\n                                  \"data-placement\": \"top\",\n                                  \"data-original-title\": _vm.getInvalidOptionTooltip(\n                                    attribute.attributeId,\n                                    value.attributeValueId\n                                  )\n                                },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.selectAttribute(\n                                      attribute.attributeId,\n                                      value.attributeValueId\n                                    )\n                                  }\n                                }\n                              },\n                              [\n                                attribute.type === \"box\"\n                                  ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(_vm._s(value.name))\n                                    ])\n                                  : _c(\"img\", {\n                                      staticClass: \"p-1\",\n                                      attrs: {\n                                        src: value.imageUrl,\n                                        alt: value.name\n                                      }\n                                    })\n                              ]\n                            )\n                          })\n                        ],\n                        2\n                      )\n                    ])\n                  : _vm._e()\n              ])\n            }),\n            _vm._v(\" \"),\n            Object.keys(_vm.possibleUnits).length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        on: {\n                          change: function($event) {\n                            return _vm.selectUnit($event.target.value)\n                          }\n                        }\n                      },\n                      _vm._l(_vm.possibleUnits, function(unit, unitId) {\n                        return _c(\n                          \"option\",\n                          {\n                            domProps: {\n                              value: unitId,\n                              selected: parseInt(unitId) === _vm.selectedUnit\n                            }\n                          },\n                          [\n                            _vm.isUnitSelectionValid(unitId)\n                              ? [\n                                  _vm._v(\n                                    \"\\n                            \" +\n                                      _vm._s(unit) +\n                                      \"\\n                        \"\n                                  )\n                                ]\n                              : [\n                                  _vm._v(\n                                    \"\\n                            \" +\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemInvalidAttribute\",\n                                          { name: unit }\n                                        )\n                                      ) +\n                                      \"\\n                        \"\n                                  )\n                                ]\n                          ],\n                          2\n                        )\n                      }),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\"label\", [\n                      _vm._v(\n                        _vm._s(\n                          _vm.$translate(\"Ceres::Template.singleItemContent\")\n                        )\n                      )\n                    ])\n                  ])\n                ])\n              : _vm._e()\n          ],\n          2\n        )\n      : _c(\"div\", [_vm._t(\"default\")], 2)\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=4a939d05&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/stentrop/workspace/localsystem/plugins/inbox/plugins/Ceres/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4a939d05')) {\n      api.createRecord('4a939d05', component.options)\n    } else {\n      api.reload('4a939d05', component.options)\n    }\n    module.hot.accept(\"./VariationSelect.vue?vue&type=template&id=4a939d05&\", function () {\n      api.rerender('4a939d05', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/src/app/components/item/VariationSelect.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=template&id=4a939d05&\""],"sourceRoot":""}