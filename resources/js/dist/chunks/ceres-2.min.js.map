{"version":3,"sources":["webpack:///./node_modules/lodash/_equalArrays.js","webpack:///./node_modules/core-js/modules/es.object.values.js","webpack:///./node_modules/core-js/internals/object-to-array.js","webpack:///./node_modules/lodash/isEqual.js","webpack:///./node_modules/lodash/_baseIsEqual.js","webpack:///./node_modules/lodash/_baseIsEqualDeep.js","webpack:///./node_modules/lodash/_SetCache.js","webpack:///./node_modules/lodash/_setCacheAdd.js","webpack:///./node_modules/lodash/_setCacheHas.js","webpack:///./node_modules/lodash/_arraySome.js","webpack:///./node_modules/lodash/_cacheHas.js","webpack:///./node_modules/lodash/_equalByTag.js","webpack:///./node_modules/lodash/_mapToArray.js","webpack:///./node_modules/lodash/_setToArray.js","webpack:///./node_modules/lodash/_equalObjects.js"],"names":["SetCache","arraySome","cacheHas","module","exports","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","length","othLength","stacked","get","index","result","seen","undefined","set","arrValue","othValue","compared","othIndex","push","$","$values","values","target","stat","O","DESCRIPTORS","objectKeys","toIndexedObject","propertyIsEnumerable","f","createMethod","TO_ENTRIES","it","key","keys","i","call","entries","baseIsEqual","value","baseIsEqualDeep","isObjectLike","Stack","equalArrays","equalByTag","equalObjects","getTag","isArray","isBuffer","isTypedArray","objectTag","hasOwnProperty","Object","prototype","object","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","MapCache","setCacheAdd","setCacheHas","this","__data__","add","has","predicate","cache","Symbol","Uint8Array","eq","mapToArray","setToArray","symbolProto","symbolValueOf","valueOf","tag","byteLength","byteOffset","buffer","name","message","convert","size","map","Array","forEach","getAllKeys","objProps","objLength","skipCtor","objValue","objCtor","constructor","othCtor"],"mappings":"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","file":"chunks/ceres-2.min.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.github.io/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.github.io/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.github.io/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n"],"sourceRoot":""}