{% import "Ceres::PageDesign.Macros.LayoutContainer" as LayoutContainer %}

{{ component("Ceres::Item.Components.ItemBundle") }}
{{ component("Ceres::Item.Components.OrderPropertyValue") }}
{{ component("Ceres::Item.Components.QuantityInput") }}

<script type="x/template" id="vue-basket-list-item">
    <div class="basket-item-container basket-list-item">

        {{ LayoutContainer.show("Ceres::BasketList.BeforeItem") }}

        <div class="basket-item component-loading with-icon" :class="{ 'sending isLoading': waiting, 'isLoading': isCheckoutReadonly }">

            <div class="image-container">
                <img class="img-basket-small" v-if="image" :src="image" :alt="altText" :title="itemName">
            </div>

            <div class="meta-container-wrapper">
                <div class="meta-container-wrapper-inner">
                    <div class="meta-container">
                        <div>
                            <a :href="basketItem.variation.data | itemURL" class="item-name text-primary text-appearance">
                                ${ basketItem.variation.data |Â itemName }
                            </a>

                            <div class="item-base-price">
                                ${ unitPrice | currency }
                            </div>

                            <item-bundle :bundle-type="basketItem.variation.data.variation.bundleType"
                                         :bundle-components="basketItem.variation.data.bundleComponents"></item-bundle>

                            <div class="item-small-prices text-muted" v-if="!(basketItem.variation.data.unit.unitOfMeasurement === 'C62' && basketItem.variation.data.unit.content === 1) && basketItem.variation.data.variation.mayShowUnitPrice">
                                <div>
                                    ${ basePrice }
                                </div>
                                <div>
                                    <strong>{{ trans("Ceres::Template.basketContent") }}: </strong>
                                    ${ basketItem.variation.data.unit.content } ${ basketItem.variation.data.unit.names.name }
                                </div>
                            </div>

                            <div class="item-small-prices" v-if="basketItem.inputLength > 0 || basketItem.inputWidth > 0">
                                <div>
                                    <strong>{{ trans("Ceres::Template.itemInput") }} ${ basketItem | inputUnit(true)}: </strong>
                                    ${ basketItem | inputUnit}
                                </div>
                            </div>

                            <div class="item-small-prices">
                                <div v-for="attribute in basketItem.variation.data.attributes">
                                    <strong>${ attribute.attribute.names.name }: </strong>
                                    <span>${ attribute.value.names.name }</span>
                                </div>
                            </div>

                                <div class="item-small-prices text-muted">
                                    <template v-for="propertyGroup in transformedVariationProperties">
                                        <div v-for="property in propertyGroup.properties">
                                            <strong v-if="propertyGroup.name">${ propertyGroup.name }: </strong>
                                            <span>${ property.names.name }</span>
                                            <span v-if="property.cast == 'file'">
                                                <a :href="property.values.value | propertyFileUrl" v-html="property.values.value" target="_blank"></a>
                                            </span>
                                            <span v-else v-html="property.values.value"></span>
                                        </div>
                                    </template>
                                </div>
                        </div>
                    </div>

                    <div class="basket-item-container-right">
                        <div class="qty-box-container">
                            <quantity-input
                                    template="#vue-quantity-input"
                                    @quantity-change="updateQuantity"
                                    :value="basketItem.quantity"
                                    :waiting="isInputLocked || isCheckoutReadonly"
                                    :min="basketItem.variation.data.variation.minimumOrderQuantity"
                                    :max="basketItem.variation.data.variation.maximumOrderQuantity"
                                    :interval="basketItem.variation.data.variation.intervalOrderQuantity"></quantity-input>
                        </div>

                        <div class="price-box">
                            <div class="item-total-price">${ itemTotalPrice | currency(basketItem.variation.data.prices.default.currency) }</div>

                            <div class="item-remove-container">
                                <div class="btn btn-sm item-remove-button" :class="{ 'disabled': waiting || isBasketLoading || isCheckoutReadonly || waitingForDelete }" @click="deleteItem">
                                    <span>
                                        {{ trans("Ceres::Template.basketDelete") }}
                                        <i v-waiting-animation="waitingForDelete" class="fa fa-trash-o" aria-hidden="true"></i>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="item-properties" v-if="basketItem.basketItemOrderParams.length">
                    <div class="item-properties-header">{{ trans("Ceres::Template.basketAdditionalOptions") }}:</div>
                    <ul class="ml-3">
                        <li v-for="property in basketItem.basketItemOrderParams" :key="property.propertyId" v-show="isPropertyVisible(property.propertyId)">
                            <span class="item-property-value">
                                <strong :class="{ 'colon': property.type.length > 0 }">${ property.name } ({{ trans("Ceres::Template.basketIncludeAbbr") }} ${ basketItem.variation.data.properties | propertySurcharge(property.propertyId) | currency })</strong>
                                <span>
                                    <order-property-value :property="property"></order-property-value>
                                </span>
                            </span>
                        </li>
                    </ul>
                </div>

                <template>
                    <div class="item-additional-information-container">
                        <div class="item-additional-information" v-if="showMoreInformation">
                            <template v-if="isDataFieldVisible('basket.item.item_id') && basketItem.variation.data.item.id">
                                <div class="mt-3">
                                    <strong>{{ trans("Ceres::Template.basketItemId") }}:</strong>
                                    <span>${ basketItem.variation.data.item.id }</span>
                                </div>
                            </template>

                            <template v-if="isDataFieldVisible('basket.item.customNumber')">
                                <div v-if="basketItem.variation.data.variation.number">
                                    <strong>{{ trans("Ceres::Template.basketItemNumber") }}:</strong>
                                    <span>${ basketItem.variation.data.variation.number }</span>
                                </div>
                            </template>

                            <template v-if="isDataFieldVisible('basket.item.availability')">
                                <div v-if="basketItem.variation.data.variation.availability.names.name">
                                    <strong>{{ trans("Ceres::Template.basketAvailability") }}:</strong>
                                    <span>${ basketItem.variation.data.variation.availability.names.name }</span>
                                </div>
                            </template>

                            <template v-if="isDataFieldVisible('basket.item.description_long')">
                                <p class="my-3" v-if="basketItem.variation.data.texts.description" v-html="basketItem.variation.data.texts.description"></p>
                            </template>

                            <template v-if="isDataFieldVisible('basket.item.description_short')">
                                <p class="my-3" v-if="basketItem.variation.data.texts.shortDescription" v-html="basketItem.variation.data.texts.shortDescription"></p>
                            </template>
                        </div>
                    </div>
                </template>

                <label v-if="isMoreButtonVisible"
                    class="btn-collapse"
                    :class="{ 'collapsed': !showMoreInformation }"
                    @click="showMoreInformation = !showMoreInformation"
                    data-show-more="{{ trans("Ceres::Template.basketShowMore") }}"
                    data-show-less="{{ trans("Ceres::Template.basketShowLess") }}">
                </label>
            </div>
        </div>

        {{ LayoutContainer.show("Ceres::BasketList.AfterItem") }}

    </div>
</script>
