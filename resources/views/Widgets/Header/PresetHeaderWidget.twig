{% import "Ceres::PageDesign.Macros.LayoutContainer" as LayoutContainer %}
{% import "Ceres::Widgets.Helper.TwigBuilder" as Twig %}
{% import "Ceres::Widgets.Helper.WidgetHelper" as WidgetHelper %}

{% set uid = uid() %}

{% set customClass                  = widget.settings.TopBarContainer.customClass.mobile %}
{% set enableLogin                  = widget.settings.TopBarContainer.enableLogin.mobile %}
{% set enableRegistration           = widget.settings.TopBarContainer.enableRegistration.mobile %}
{% set enableLanguageSelect         = widget.settings.TopBarContainer.enableLanguageSelect.mobile %}
{% set enableShippingCountrySelect  = widget.settings.TopBarContainer.enableShippingCountrySelect.mobile %}
{% set enableCurrencySelect         = widget.settings.TopBarContainer.enableCurrencySelect.mobile %}
{% set searchStyle                  = widget.settings.TopBarContainer.searchStyle.mobile %}
{% set enableWishList               = widget.settings.TopBarContainer.enableWishList.mobile %}
{% set enableBasketPreview          = widget.settings.TopBarContainer.enableBasketPreview.mobile %}
{% set basketValues                 = widget.settings.TopBarContainer.basketValues.mobile %}

{{ Twig.import("LayoutContainer", "Ceres::PageDesign.Macros.LayoutContainer") }}
{{ Twig.set("currencyFormat", Twig.call("config", ["Ceres.currency.format"])) }}
{{ Twig.set("currencyFormatSelect", Twig.call("config", ["Ceres.currency.format_selection"])) }}
{{ Twig.set("currencyData", Twig.call("services.checkout.getCurrencyData") ~ "[currencyFormat]") }}
{{ Twig.set("activeCurrencies", Twig.call("config", ["Ceres.currency.available_currencies"]) ~ " | split(\", \")") }}
{{ Twig.set("defaultLanguage", "webstoreConfig.defaultLanguage" ) }}
{{ Twig.set("overrideSearchBar", Twig.call("LayoutContainer.show", ["Ceres::Search.SearchBar"])) }}
{{ Twig.set("visibleFields", "ceresConfig.basket.previewData") }}



{% set customClass = widget.settings.NavigationContainer.customClass.mobile %}
{% set spacingSettings = widget.settings.NavigationContainer.spacing %}
{% set inlineSpacings = WidgetHelper.getInlineSpacings(spacingSettings, spacingSettings.customPadding.mobile, spacingSettings.customMargin.mobile) %}
{% set spacingClasses = WidgetHelper.getSpacingClasses(spacingSettings, spacingSettings.customPadding.mobile, spacingSettings.customMargin.mobile) %}


{% set navigationStyle      = widget.settings.NavigationContainer.navigationStyle.mobile %}
{% set companyLogoUrl       = widget.settings.NavigationContainer.companyLogoUrl.mobile %}
{% set fallbackImagePath    = widget.settings.NavigationContainer.fallbackImagePath.mobile %}

{% set megaMenuMaxItems1    = widget.settings.NavigationContainer.megaMenuMaxItems.stage1.mobile | default(30) %}
{% set megaMenuMaxItems2    = widget.settings.NavigationContainer.megaMenuMaxItems.stage2.mobile | default(3) %}
{% set megaMenuMaxItems3    = widget.settings.NavigationContainer.megaMenuMaxItems.stage3.mobile | default(2) %}
{% set megaMenuMaxItems     = { "1": megaMenuMaxItems1, "2": megaMenuMaxItems2, "3": megaMenuMaxItems3 } %}

{% if navigationStyle == 'megaMenu' %}
    {% set megaMenuLevels       = widget.settings.NavigationContainer.megaMenuLevels.mobile | default(2) %}
{% else %}
    {% set megaMenuLevels = 2 %}
{% endif %}

{% if companyLogoUrl is empty %}
    {% set companyLogoUrl = ceresConfig.header.companyLogo %}
{% endif %}

{% if fallbackImagePath | trim is empty %}
    {% set fallbackImagePath = companyLogoUrl %}
{% endif %}

{{ Twig.set("logoUrl", companyLogoUrl | json_encode) }}
{{ Twig.print("add_asset(logoUrl,'image')") }}

{{ Twig.import("Tree", "Ceres::Category.Macros.CategoryTree") }}






{% set customClass           = widget.settings.BreadCrumbContainer.customClass.mobile %}
{% set isFixed               = widget.settings.BreadCrumbContainer.isFixed.mobile %}
{% set showOnHomepage        = widget.settings.BreadCrumbContainer.showOnHomepage.mobile %}
{% set showOnMyAccount       = widget.settings.BreadCrumbContainer.showOnMyAccount.mobile %}
{% set showOnCheckout        = widget.settings.BreadCrumbContainer.showOnCheckout.mobile %}
{% set showOnContentCategory = widget.settings.BreadCrumbContainer.showOnContentCategory.mobile %}
{% set showOnLegalPages      = widget.settings.BreadCrumbContainer.showOnLegalPages.mobile %}



<div class="parent-preset-container">
    <div class="sticky-top">
    {% include "Ceres::Widgets.Header.TopBarWidget" %}

<nav class="navbar header-fw p-0 border-bottom{% if customClass | length > 0 %} {{ customClass }}{% endif %}{% if navigationStyle == 'megaMenu' %} megamenu{% else %} normalmenu{%endif%}">
    <div class="container-max d-block{% if spacingClasses | length > 0 %} {{ spacingClasses }}{% endif %}"
            {% if inlineSpacings | length > 0 %} style="{{ inlineSpacings }}"{% endif %}>
        <div class="row mx-0 position-relative d-flex">
            <div class="brand-wrapper px-lg-3 d-flex flex-fill">
                {% if companyLogoUrl | trim | length > 0 %}
                    <a class="navbar-brand py-2" href="{{ Twig.print('urls.home') }}">
                        <picture>
                            <source srcset="{{ companyLogoUrl }}"{% if companyLogoUrl matches '/.?(\\.webp)(?:$|\\?)/' %} type="image/webp"{% endif %}>
                            <img
                                    class="img-fluid"
                                    src="{{ fallbackImagePath }}"
                                    alt="{{ Twig.print('trans("Ceres::Template.headerCompanyName")') }}"
                            />
                        </picture>
                    </a>
                {% endif %}

                <button v-open-mobile-navigation class="navbar-toggler d-lg-none p-3" type="button">
                    &#9776;
                </button>
            </div>

            <div class="main-navbar-collapsable d-none d-lg-block">
                <ul class="mainmenu p-0 m-0 d-flex">
                    {{ Twig.print(Twig.call("Tree.get_nav_bar", [Twig.var("categories"), "", megaMenuLevels, megaMenuMaxItems])) }}
                </ul>
            </div>

        </div>
    </div>
</nav>
    </div>
    {{ Twig.do("cacheslot breadcrumbs") }}

    {% if not isPreview %}
        {% if not showOnHomepage %}
            {{ Twig.if("not services.template.isCurrentTemplate('tpl.home') and not services.template.isCurrentTemplate('tpl.home.category')") }}
        {% endif %}

        {% if not showOnMyAccount %}
            {{ Twig.if("not services.template.isCurrentTemplate('tpl.my-account')") }}
        {% endif %}

        {% if not showOnCheckout %}
            {{ Twig.if("not services.template.isCurrentTemplate('tpl.checkout')") }}
        {% endif %}

        {% if not showOnContentCategory %}
            {{ Twig.if("not services.template.isCurrentTemplate('tpl.category.content')") }}
        {% endif %}

        {% if not showOnLegalPages %}
            {{ Twig.if("not urls.isLegalPage()") }}
        {% endif %}
    {% endif %}
    <div class="breadcrumbs header-fw{% if customClass | length > 0 %} {{ customClass }}{% endif %}">
        <nav class="small d-none d-md-block px-0" data-component="breadcrumbs" data-renderer="twig">
            {{ Twig.set('crumbs', '[]') }}
            <ul class="breadcrumb container-max px-3 py-2 my-0 mx-auto">
                <li class="breadcrumb-item">
                    <a href="{{ Twig.print('urls.home') }}">
                        <i class="fa fa-home" aria-hidden="true"></i>
                        {{ Twig.set("breadcrumbHome", "trans('Ceres::Template.headerBreadcrumbHome')") }}
                        <span class="breadcrumb-home">{{ Twig.print("breadcrumbHome") }}</span>
                        {{ Twig.set('crumb', '
                        [
                            {
                                "@type": "ListItem",
                                "position": 1,
                                "item":
                                {
                                    "@id": urls.home,
                                    "name": "Home"
                                }
                            }
                        ]')
                        }}
                        {{ Twig.set('crumbs', 'crumbs | merge(crumb)') }}
                    </a>
                </li>
                {{ Twig.if("categoryBreadcrumbs is not empty") }}
                {{ Twig.set("break", "false") }}
                {{ Twig.set("catLevel", 2) }}
                {{ Twig.for("category", "categoryBreadcrumbs[:categoryBreadcrumbs | length - 1]", "not break") }}
                {{ Twig.if("category.details[0]") }}
                <li class="breadcrumb-item">
                    <a href="{{ Twig.print(Twig.call("services.category.getURLById", [Twig.var("category.id")])) }}">
                        {{ Twig.print("category.details[0].name") }}
                    </a>
                    {{ Twig.set('crumb', '
                                [
                                    {
                                        "@type": "ListItem",
                                        "position": catLevel,
                                        "item":
                                        {
                                            "@id": services.category.getURLById(category.id),
                                            "name": category.details[0].name
                                        }
                                    }
                                ]')
                    }}
                    {{ Twig.set('crumbs', 'crumbs | merge(crumb)') }}
                    {{ Twig.do("set catLevel = catLevel + 1") }}
                </li>
                {{ Twig.else() }}
                {{ Twig.set("break", "true") }}
                {{ Twig.endif() }}
                {{ Twig.endfor() }}

                {{ Twig.set("lastCategory", "categoryBreadcrumbs | last") }}
                {{ Twig.if("lastCategory.details is defined") }}
                <li class="breadcrumb-item active">
                    {{ Twig.set('crumb', '
                                            [
                                                {
                                                    "@type": "ListItem",
                                                    "position": catLevel,
                                                    "item":
                                                    {
                                                        "@id": services.category.getURLById(lastCategory.id),
                                                        "name": lastCategory.details[0].name
                                                    }
                                                }
                                            ]')
                    }}
                    {{ Twig.set('crumbs', 'crumbs | merge(crumb)') }}
                    <span>{{ Twig.print("lastCategory.details[0].name") }}</span>
                </li>
                {{ Twig.elseif("item.documents[0].data is defined") }}
                <li class="breadcrumb-item active">
                    {{ Twig.set('crumb', '
                                [
                                    {
                                        "@type": "ListItem",
                                        "position": catLevel,
                                        "item":
                                        {
                                            "@id": requestedVariationUrl,
                                            "name": item.documents[0].data | itemName
                                        }
                                    }
                                ]')
                    }}
                    {{ Twig.set('crumbs', 'crumbs | merge(crumb)') }}
                    <span>{{ Twig.print("item.documents[0].data | itemName") }}</span>
                </li>
                {{ Twig.endif() }}
                {{ Twig.endif() }}
            </ul>
            <script2 type="application/ld+json">
                {
                "@context":"http://schema.org/",
                "@type":"BreadcrumbList",
                "itemListElement": {{ Twig.print('crumbs | json_encode | raw') }}
                }
            </script2>
        </nav>
    </div>

    {% if not isPreview %}
        {% if not showOnHomepage %}
            {{ Twig.endif() }}
        {% endif %}

        {% if not showOnMyAccount %}
            {{ Twig.endif() }}
        {% endif %}

        {% if not showOnCheckout %}
            {{ Twig.endif() }}
        {% endif %}

        {% if not showOnContentCategory %}
            {{ Twig.endif() }}
        {% endif %}

        {% if not showOnLegalPages %}
            {{ Twig.endif() }}
        {% endif %}
    {% endif %}
    {{ Twig.do("endcacheslot") }}

</div>


